[
  {
    "path": "posts/notes/",
    "title": "Class 01 - Ordinary Linear Regression",
    "description": "",
    "author": [
      {
        "name": "Isabella Chittumuri",
        "url": {}
      }
    ],
    "date": "2021-03-03",
    "categories": [],
    "contents": "\nTo get the markdown (```{r}), you do command alt I. To get (%>%), you do command shift M.\nTo undo, you press command Z. To run a code, you press alt enter. To run the entria chunck, press command alt N.\nSetting the stage\nDataset\nWe will use the palmerpenguins dataset to demonstrate.\n\n\nlibrary(palmerpenguins)\nlibrary(printr) # helps automatically print nice tables in presentation\nlibrary(ggplot2)\ntheme_set(theme_minimal()) # automatically set a simpler ggplot2 theme for all graphics\nknitr::include_graphics('resources/lter_penguins.png')\n\n\n\n\n artwork by @allison_horst \nLet’s explore\n\n\nsummary(penguins)\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\nAdelie :152\nBiscoe :168\nMin. :32.10\nMin. :13.10\nMin. :172.0\nMin. :2700\nfemale:165\nMin. :2007\n\nChinstrap: 68\nDream :124\n1st Qu.:39.23\n1st Qu.:15.60\n1st Qu.:190.0\n1st Qu.:3550\nmale :168\n1st Qu.:2007\n\nGentoo :124\nTorgersen: 52\nMedian :44.45\nMedian :17.30\nMedian :197.0\nMedian :4050\nNA’s : 11\nMedian :2008\n\nNA\nNA\nMean :43.92\nMean :17.15\nMean :200.9\nMean :4202\nNA\nMean :2008\n\nNA\nNA\n3rd Qu.:48.50\n3rd Qu.:18.70\n3rd Qu.:213.0\n3rd Qu.:4750\nNA\n3rd Qu.:2009\n\nNA\nNA\nMax. :59.60\nMax. :21.50\nMax. :231.0\nMax. :6300\nNA\nMax. :2009\n\n| |NA |NA |NA’s :2 |NA’s :2 |NA’s :2 |NA’s :2 |NA |NA |\n\npeng <- penguins[complete.cases(penguins), ]\n\n\n\n\n\n# `include = FALSE` means that the code will run but \nmod <- lm(flipper_length_mm ~ body_mass_g, data = peng)\nintercept <- coef(mod)[1]\nslope <- coef(mod)[2]\n\n\n\nDefine a relationship\nY = body_mass_g\nX = flipper_length_mm\nWe are going to say body mass is a function of flipper length directly, following the equation:\n\\[\n\\begin{aligned}\nY &= f(X) \\\\\nY &= \\beta_0 + \\beta_1X \\\\\n\\end{aligned}\n\\]\nUsing these numbers:\n\\[\n\\begin{aligned}\n\\beta_0 &= 137, \\beta_1 = .015 \\\\\nY &= 137 + .015X\n\\end{aligned}\n\\]\nDefine a relationship - Plot\nIf that’s that case, then we’re going to be able to plot some data and look at the relationship between the two.\nMake a new data frame:\n\n\n# A sequence of 400 evenly spaced out numbers between the min and max.\nsim_data <- data.frame(body_mass_g = seq(from = 2700, to = 6300, length.out = 400)) \n\n# Add a new column, where you input the y = equation from above^\nsim_data$flipper_length_mm <- 137 + sim_data$body_mass_g * .015\n\n# Create a graph\nggplot(sim_data, aes(x = body_mass_g, y = flipper_length_mm)) + geom_line()\n\n\n\n\nInterpretation\nFor every unit of X, how much does Y change?\n\\[\n\\begin{aligned}\n\\beta_0 &= 137, \\beta_1 = .015 \\\\\nY &= 137 + .015X\n\\end{aligned}\n\\]\nWhat does \\(\\beta_0\\), X, and \\(\\beta_1\\) represent?\n\\(beta_0\\) is the intercept and the value when X is zero. Meaning when the mass of a penguin is zero, its flippers are length 137. This is not practical because there is no such thing as a mass-less penguin.\nX is the body mass\n\\(beta_1\\) is the slope of the line, or rate of change. Meaning for every gram that a penguin gets larger, we expect that the length of the flipper will go up by .015mm. Those measurements are a little hard to interpret so we can multiply those values by 1000. (015*1000=15) We can say for every kg (which is 1000g), that a penguin becomes larger, their flipper is 15mm longer.\nWhat are we missing?\nIn reality, this is not a prefect relationship. The data does not follow the fitted line perfectly. There is a limit to how big or long a penguin can be.\nNote:\nA statistical relation, unlike a functional relation, is not a perfect one. In general, the observations for a statistical relation do not follow directly on-the curve of relationship.\nOverlay the actual data\n\n\n# Overlay the actual data with the fitted line\nggplot(sim_data, aes(x = body_mass_g, y = flipper_length_mm)) +\n  geom_line(aes(color = \"fitted line\")) +\n  geom_point(data = peng, aes(color = \"observed data\")) +\n  scale_color_manual(values = c(\"observed data\" =  \"#9ebcda\",\n                                \"fitted line\" = \"black\"), name = \"\")\n\n\n\n\nIn this plot, you can see that the actual data points don’t perfectly match the fitted line of the linear model. The data looks like it doesn’t fit as well on the top right side.\nHow do we model the data generating process?\nHow can we better mimic the data that we see?\nWe can add random noise.\nWhat kind of random noise can we add?\nWe want the noise to have an average of zero, constant and symmetric in width throughout the line.\nWhat can we say about the random noise?\nIn this case, we’re going to add random gaussian noise\nThat is not a necessary assumption for what we’re going to start with which is least squares estimation.\nDifferent types of noise\n\n\npar(mfrow=c(2,2))\n\n# Gaussian distribution (normal distribution)\nhist(rnorm(1000, mean = 0, sd = 1))\n\n# T-distribution\nhist(rt(1000, df = 10000))\n\n# Uniform distribution\nhist(runif(1000, min = -1, max = 1))\n\n# Poisson distribution (has a mean of 30 so we subtract it)\nhist(rpois(1000, lambda = 30) - 30)\n\n\n\n\nDifferent distributions in R\n\n\n# List of different distributions\n?distribution\n\n\nDistributions in the stats package\n\nDescription:\n\n     Density, cumulative distribution function, quantile function and\n     random variate generation for many standard probability\n     distributions are available in the 'stats' package.\n\nDetails:\n\n     The functions for the density/mass function, cumulative\n     distribution function, quantile function and random variate\n     generation are named in the form 'dxxx', 'pxxx', 'qxxx' and 'rxxx'\n     respectively.\n\n     For the beta distribution see 'dbeta'.\n\n     For the binomial (including Bernoulli) distribution see 'dbinom'.\n\n     For the Cauchy distribution see 'dcauchy'.\n\n     For the chi-squared distribution see 'dchisq'.\n\n     For the exponential distribution see 'dexp'.\n\n     For the F distribution see 'df'.\n\n     For the gamma distribution see 'dgamma'.\n\n     For the geometric distribution see 'dgeom'.  (This is also a\n     special case of the negative binomial.)\n\n     For the hypergeometric distribution see 'dhyper'.\n\n     For the log-normal distribution see 'dlnorm'.\n\n     For the multinomial distribution see 'dmultinom'.\n\n     For the negative binomial distribution see 'dnbinom'.\n\n     For the normal distribution see 'dnorm'.\n\n     For the Poisson distribution see 'dpois'.\n\n     For the Student's t distribution see 'dt'.\n\n     For the uniform distribution see 'dunif'.\n\n     For the Weibull distribution see 'dweibull'.\n\n     For less common distributions of test statistics see 'pbirthday',\n     'dsignrank', 'ptukey' and 'dwilcox' (and see the 'See Also'\n     section of 'cor.test').\n\nSee Also:\n\n     'RNG' about random number generation in R.\n\n     The CRAN task view on distributions, <URL:\n     https://CRAN.R-project.org/view=Distributions>, mentioning several\n     CRAN packages for additional distributions.\n\nAdd random noise to the data\n\n\n# Take flipper length, add data with mean 0 & standard deviation 6.8\nsim_data$flipper_length_mm_w_noise <- \n  sim_data$flipper_length_mm + rnorm(nrow(sim_data), mean = 0, sd = 6.8)\n\n\n\nCreated data follows normal distribution, with a standard deviation of 6.8 instead of 1.\n\n\n# Graph the noise we just made\nggplot(sim_data, aes(x = body_mass_g, y = flipper_length_mm)) +\n  geom_line(aes(color = \"fitted line\")) +\n  geom_point(data = peng, aes(color = \"observed data\"), alpha = 0.5) +\n  scale_color_manual(values = c(\"observed data\" =  \"#9ebcda\",\n                                \"fitted line\" = \"black\"), name = \"\") +\n  geom_point(aes(y = flipper_length_mm_w_noise))\n\n\n\n\nBy adding noise, we were able to graph the black dots above. Even though towards the end it doesn’t look the same, we can see that it even similar to the observed data (light blue dots).\nRemember that the original data didn’t fit well on the right side. Maybe as researchers, depending on what we’re looking for, we care more about the inferences about data on the right side, this wouldn’t be the best model. Or maybe we care more about the inferences about data on the left side, then the model is a good fit.\nOne of the things that we are assuming is that the observations are not correlated with each other. The observations are independent.\nA way that the observations can be dependent is that if you only went to one cluster of penguins that were the dominant group and they happen to be the big ones. Another way for them to be dependent is that off springs of certain penguins are going to be affected by their parents genetics. Another is what if you don’t tag the penguins you already looked at and end up looking at the same one again. There are certainly correlations between them in these cases. Also tech errors\nFormal Statement of Model\n\\[\nY_i = \\beta_0 + \\beta_1X_i + \\epsilon_i\n\\]\n\\(Y_i\\) is the value of the response variable in the \\(i\\)th observation, in this case its flipper length\n\\(\\beta\\)s are the parameters; \\(beta_0, beta_1\\) are somethings we are trying to estimate.\n\\(X_i\\) is a known constant, in this case body mass\n\\(\\epsilon_i\\) is a random error term with \\(E\\{\\epsilon_i\\} = 0\\), \\(Var\\{\\epsilon_i\\} = \\sigma^2\\). So the variance is constant and expected value of the error is zero. \\(\\sigma\\{\\epsilon_i, \\epsilon_j\\} = 0\\) for all \\(i, j; i \\neq j\\), meaning that the correlation between different error values is zero for all points\nFeatures of Model\nSince \\(E\\{\\epsilon_i\\} = 0\\) we can show that \\(E\\{Y_i\\} = \\beta_0 + \\beta_1X_i\\)\nSimilarly \\(\\sigma^2\\{Y_i\\} = \\sigma^2\\)\nBecause error terms are uncorrelated - Y’s are uncorrelated\nInterpretation and Alternative Form\nWe can rewrite the equation so that the \\(X_i\\) term is centered by subtracting \\(\\bar{X}\\)\nThis doesn’t change \\(\\beta_1\\) at all, but \\(\\beta_0\\) is slightly different.\nRecall what \\(\\beta_0\\) generally represents in this example\nWe can rewrite so that:\n\\[\nY_i = \\beta_0^* + \\beta_1(X_i - \\bar{X}) + \\epsilon_i\n\\]\n\n\nsummary(peng$body_mass_g)\n\n\nMin.\n1st Qu.\nMedian\nMean\n3rd Qu.\nMax.\n2700\n3550\n4050\n4207.057\n4775\n6300\n\nIn this case, \\(\\bar{X}\\) is 4207. We can subtract that from each value of X and re-run the regression. By doing this \\(\\beta_0^*\\) goes by \\(\\bar{X} * beta_1\\).\nWhen will \\(Y_i = beta_0\\)? When \\(X_i\\) equals to the mean, which will make \\(beta_1 = 0\\). Now instead of the intercept being the equivalent of a zero mass penguin, it will now be an average penguin.\nEstimating the parameters\nHow do we know which line is better?\nEqual number of data points of each side of the line.\nMethod of Least Squares\nWe want to minimize \\(Q\\) where:\n\n\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n  geom_point(aes(color = \"observed data\")) +\n  geom_abline(color = \"#fb9a99\", intercept = 137, slope = 0.015, show.legend = T) + \n  geom_abline(intercept = 90, slope = 0.025, color = \"#33a02c\") + \n  scale_color_manual(values = c(\"observed data\" =  \"#9ebcda\")) +\n  labs(title = \"Which line fits better?\", color = \"\")\n\n\n\n\nMethod of Least Squares\nWe want to minimize \\(Q\\) where:\n\\[\nQ = \\sum^n_{i=1}{(Y_i - \\beta_0 - \\beta_1X_i)^2}\n\\] - Q is our least squares value\nOur estimates for \\(\\beta_0\\) and \\(\\beta_1\\) will be \\(\\hat\\beta_0\\) and \\(\\hat\\beta_1\\), respectively.\nWe are squaring it to avoid getting zero when we are above and below the line\nThis could pose a problem because if you have a point that’s very far from your line or center of data it could influence the fitting of the line.\nMethod of Least Squares: Visual\n\n\nset.seed(202008)\n\nd_least_squares <- penguins %>% \n  mutate(line1 = 137 + .015*body_mass_g,\n         line2 = 90 + .025*body_mass_g) %>% \n  sample_n(4) %>% \n  select(body_mass_g, flipper_length_mm, line1, line2)\n\nd_least_squares %>% \n  ggplot(aes(x = body_mass_g)) +\n  geom_point(aes(y = flipper_length_mm, color = \"observed data\")) +\n  geom_line(aes(y = line1), color = \"#fb9a99\") + \n  geom_linerange(aes(ymin = line1, ymax = flipper_length_mm), color = \"#fb9a99\", linetype = \"longdash\") + \n  geom_line(aes(y = line2), color = \"#33a02c\") + \n  geom_abline(intercept = 90, slope = 0.025, color = \"#33a02c\") + \n  scale_color_manual(values = c(\"observed data\" =  \"#9ebcda\")) +\n  labs(color = \"\")\n\n\n\n\nCalculate Q | Definitions\nLine1: \\(Y = 137 + .015X\\)\nLine2: \\(Y = 90 + .025X\\)\n\n\nd_least_squares\n\n\nbody_mass_g\nflipper_length_mm\nline1\nline2\n3200\n187\n185.00\n170.00\n3600\n181\n191.00\n180.00\n5500\n219\n219.50\n227.50\n5450\n221\n218.75\n226.25\n\nCalculate Q | Definitions\n\n\n# Caluse the sum of the squared differences\nwith(d_least_squares, sum((line1 - flipper_length_mm)^2))\n\n\n[1] 109.3125\n\nwith(d_least_squares, sum((line2 - flipper_length_mm)^2))\n\n\n[1] 389.8125\n\nThis means that according to this definition that line 1 fits better.\nHow do you solve for best \\(\\hat\\beta_0\\) and \\(\\hat\\beta_1\\)?\nNumerical Search\nOne way is to try a bunch of different values for \\(beta_0 and beta_1\\) and find the one with the lowest Q. The darker the value, the lower Q is.\n\n\nall_params <- expand.grid(\n  b0 = seq(-500, 500, length.out = 100),\n  b1 = seq(-.125, .125, length.out = 100)\n)\n\ncalculate_q <- function(b0, b1){\n  raw_diff <- with(peng, flipper_length_mm - (b0 + b1*body_mass_g))\n  Q <- sum(raw_diff^2)\n  Q\n}\n\nall_params$Q <- purrr::pmap_dbl(all_params, calculate_q)\n\nggplot(all_params, aes(x = b0, y = b1, fill = Q,color = NULL)) +\n  geom_tile() +\n  scale_fill_gradient(trans = \"log\", ) +\n  geom_point(aes(x = 137, y = .015), color = \"white\", shape = 3) +\n  labs(title = \"Numerical Search for lowest Q\")\n\n\n\n\nWhat are problems with this approach?\nThe problem with this approach is that it’s too slow with lots of parameters (although there are plenty of functions that optimize more efficiently like optim).\nHow do you solve for best \\(\\hat\\beta_0\\) and \\(\\hat\\beta_1\\)?\nAnalytic Approach\n\\[\n\\hat\\beta_1 = \\frac{\\sum{(X_i - \\bar{X})(Y_i - \\bar{Y})}}{\\sum{(X_i - \\bar{X})^2}}\n\\]\n\\[\n\\hat\\beta_0 = ???\n\\] - \\(\\hat\\beta_0 = \\bar{Y} - \\hat\\beta_1\\bar{X}\\)\nWhat happens to that equation when we center \\(X\\)?\nAll the \\(\\bar{X}\\)s become zero. Because if we center the X, that means we subtracted the mean. By doing that, their new mean is zero. And so \\(beta_0\\) becomes \\(\\bar{Y}\\)\nWhat happens if we get more data points?\nCan you predict if \\(beta_0 and beta_1\\) will change, will they get bigger or smaller? We don’t know how the parameters will change\nSolve for \\(\\hat{\\beta_1}\\) and \\(\\hat{\\beta_0}\\)\n\n\nx_bar <- mean(peng$body_mass_g)\ny_bar <- mean(peng$flipper_length_mm)\n\n# Using the Analytic Approach\nbeta_1 <- sum((peng$body_mass_g - x_bar)*(peng$flipper_length_mm - y_bar))/sum((peng$body_mass_g - x_bar)^2)\nbeta_0 <- y_bar - beta_1*x_bar\n\nbeta_0\n\n\n[1] 137.0396\n\nbeta_1\n\n\n[1] 0.01519526\n\nPoint Estimation\nIf I have a penguin that is 3K, how long do I expect that penguin’s flipper to be?\n\n\nbeta_0 + beta_1*3000\n\n\n[1] 182.6254\n\nResiduals\n\\(e_i = Y_i - \\hat{Y_i} = Y_i - (\\hat\\beta_0 + \\hat\\beta_1X_i)\\)\nA residual is the difference between the observed value of Y and the estimated value of Y (\\(\\hat{Y_i}\\))\nThis is related to Q: Q is the sum of the residuals squared.\nThe residual is the distance between the point of the line.\n\n\nresiduals <- peng$flipper_length_mm - (beta_0 + beta_1*peng$body_mass_g)\nhist(residuals)\n\n\n\n\nThis looks a little skewed to the left. This one is not so bad.\nProperties\n\\(\\sum^{n}_{i = 1} {e_i} = ?\\)\n\\(\\sum^{n}_{i = 1} {e_i} = 0\\)\nEven though it is a little skewed, if we sum up all the residuals, they will equal zero.\n\n\\(\\sum^{n}_{i = 1} {e_i^2} = ?\\)\nIt’s a minimum (it’s the same as Q)\n\n\\(\\sum{Y_i} = \\sum{\\hat{Y}}\\)\nThe sum of all observed Ys is the same as sum of all of the predicted values, because sum of residuals = 0\n\n\\(\\sum{X_ie_i} = 0\\)\n\\(\\sum{\\hat{Y_i}e_i} = 0\\)\nThe regression line will always go through \\((\\bar{X}, \\bar{Y})\\)\nIf you recenter the X’s, then that \\(\\bar{x}\\) will be zero. Then \\(beta_0\\) is your average Y\nEstimation of \\(\\sigma^2\\) | Sample Variance\nThe true variance (or unknown variance) is \\(\\sigma^2\\), estimate it with \\(\\hat{\\sigma}^2\\)\n\\[\n\\hat{\\sigma}^2 = \\frac{\\sum^n_{i=1}{(Y_i - \\bar{Y})^2}}{n - 1}\n\\]\nWhy \\(n-1\\)?\nBecause we’re estimating the mean. It’s another way of thinking the amount freedom, degrees of freedom in our estimate. What we do is we use 1 degree of freedom when estimating so we have to subtract it.\nEstimation of \\(\\sigma^2\\)\nError sum of squares \\[\nSSE = \\sum^n_{i = 1}(Y_i - \\hat{Y_i})^2 \\\\\n\\]\nError mean square\nIt’s n-2 because we’re estimating \\(beta_0\\) and \\(beta_1\\) in \\(\\hat{Y}\\). This will change with more parameters\n\\[\n\\hat{\\sigma}^2  = MSE = \\frac{SSE}{n-2}\n\\]\nExpected value of MSE is unbiased, equaling the true variance\n\\[\nE\\{MSE\\} = \\sigma^2\n\\]\nEstimation of \\(\\sigma^2\\)\n\n\nsse <- sum(residuals^2)\nmse <- sse/(length(residuals)-2)\nmse\n\n\n[1] 46.87621\n\nsqrt(mse)\n\n\n[1] 6.84662\n\nIf we got more data, the variance of our estimate should go down and MSE would decrease.\nMaximum Likelihood Estimation\nMotivation\nNo matter what may be the form of the distribution of the error terms, the least squares method provides unbiased point estimators of \\(\\beta_0\\) and \\(\\beta_1\\) that have minimum variance among all unbiased linear estimators.\nTo set up interval estimates and make tests, however, we need to make an assumption about the form of the distribution of the error terms.\nSet Up\nHow to define the mean/standard deviation\n\n\nX <- c(250, 265, 259)\n\n\n\nIs it more likely to come from normal(230, 10) or normal(260, 5) [normal distribution, with mean of and standard deviation of]?\nIt would be 260 one because its closer to the actual values\nSet Up | Visualization\n\n\n# Created 10000 random draws from those two distributions\nop_1_sample <- rnorm(10000, 230, 10)\nop_2_sample <- rnorm(10000, 260, 5)\n\n\n\n\n\n# Make a histogram of it with the three points\nsamp_df <- bind_rows(\n  data.frame(samp = op_1_sample,\n             dist = \"normal(230, 10)\"),\n   data.frame(samp = op_2_sample,\n             dist = \"normal(260, 5)\")\n) \n\nsamp_df %>% \n  ggplot(aes(x = samp)) +\n  geom_density() +\n  facet_wrap(~dist) +\n  geom_point(data = data.frame(samp = X), y = 0, color = \"red\")\n\n\n\n\nIt seems that those three points are more likely to come from the distribution on the right.\nSampling vs Density Function\n\\[\nL(\\mu, \\sigma | x) =\n\\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\n\\]\n\n\nraw_norm_eq <- function(x, mu, sigma){\n  1/sqrt(2*pi*sigma^2) * exp(-((x-mu)^2/(2*sigma^2)))\n}\n\nall.equal(raw_norm_eq(210:260, mu = 230, sigma = 10),\n          dnorm(210:260, mean = 230, 10))\n\n\n[1] TRUE\n\nLikelihood Calculation\n\n\nlh <- data.frame(X = X,\n           opt_1_l = dnorm(X, mean = 230, 10), \n           opt_2_l = dnorm(X, mean = 260, sd = 5))\n\n\n\n\n\nprod(lh$opt_1_l)\n\n\n[1] 2.804654e-10\n\nprod(lh$opt_2_l)\n\n\n[1] 4.086938e-05\n\nThe second one is larger, meaning that it is more likely that the points came from the second distribution.\nThe likelihood calculation depends on how well the data fits. The total likelihood can go down when you have more data, because when you multiply a # less than 1 with another # less than 1 it becomes even smaller. That’s why when your comparing it, you need to have the same amount of data in both.\nThe likelihood is not the probability. The probability of any 1 piece of data is zero. In order to get the probability, you have to integrate over sections of density functions.\nLogLiklihood Calculation\nMultiplying ever smaller numbers becomes a problem for the computer so we often work with the loglikelihood\nSo what you end up doing is loglikelihood\n\n\nsum(log(lh$opt_1_l))\n\n\n[1] -21.99457\n\nsum(log(lh$opt_2_l))\n\n\n[1] -10.10513\n\nThe log is to the base e\nIf you have a high loglikelihood, you’re closer to zero, you’ll also have a higher likelihood\nFinding Optimal Points\nKeep sigma constant at 10\nCalculating log likelihood for different values of the mean\n\n\nexpand.grid(mean = 210:300, \n            sd = 10) %>% \n  mutate(LL = purrr::map2_dbl(mean, sd, ~sum(dnorm(X, .x, .y, log = T)))) %>% \n  ggplot(aes(x = mean, y = LL)) +\n  geom_line()\n\n\n\n\nThe most likely value is at the top of the curve, at mean 260\nThis is a formal way of judging if data are likely to come from a distribution\nWe would have a better understanding of what the true mean of the data was the pointer, steeper, this graph is.\nFor this graph it’s a little flat at the top, the mean has a range of 250-262. but if it was pointy, it’ll be an exact true mean\nApplication to regression\n\\[\n\\begin{aligned}\nL(\\mu, \\sigma | x) & = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} \\\\\n\\mu & = \\beta_0 + \\beta_1X_i, x = Y_i \\\\\nL(\\beta_0, \\beta_1, \\sigma | X, Y) & = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(Y_i - \\beta_0 - \\beta_1X_i)^2}{2\\sigma^2}} \n\\end{aligned}\n\\]\nLikelihood in terms of regression\nWe want to define \\(\\mu_0\\)\nFrom the first eq, we’re going to substitute our expectation of Y from the regression equation into \\(\\mu_0\\) and the actual value is Yi and so that’s the difference there.\nThat means we can test the likelihood of those 3 parameters given the data that we’re seeing.\nOn third equation, the likelihood of \\(beta_0, beta_1, sigma\\) (these 3 estimates we’ve been estimating using the method of least squares previously) given the observed data \\(X_i, Y_i\\) is given =\nwe want to define \\(\\mu_0\\) by subbing a different equation for the mean\nWhat we’re saying is that the data and in fact the residual, error term, comes from a normal distribution. The normal distribution is defined by the first equation. What combination of these 3 parameters gives me the highest likelihood given the data. This is what max likelihood estimation is, and its important because the least squares method can only get us so far.\nTo take us to different types and to generalize the linear model, we would need to use the max likelihood estimation. And leverage that because we can look at lots of different distributions that way and that’s how we can expand our repertoire of possible regressions\nFor n points:\n\\[\n\\begin{aligned}\nL(\\beta_0, \\beta_1, \\sigma) & = \\prod^{n}_{i=1}\\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(Y_i - \\beta_0 - \\beta_1X_i)^2}{2\\sigma^2}} \\\\\n\\end{aligned}\n\\]\nSolving the parameters\n\\(\\beta_0\\) and \\(\\beta_1\\) are estimated the same as with least squares\nHere we are making assumptions about the distribution of the error terms. This is not an unbiased estimate of \\(\\hat{\\sigma}^2\\)\nThis is biased\nUnbiased estimates may not exist in more complicated regressions\n\\[\n\\hat{\\sigma}^2 = \\frac{\\sum{(Y_i - \\hat{Y_i})^2}}{n}\n\\]\nOn Centering\n\n\npeng$body_mass_g_cent <- peng$body_mass_g - mean(peng$body_mass_g)\n\nsummary(peng$body_mass_g_cent)\n\n\nMin.\n1st Qu.\nMedian\nMean\n3rd Qu.\nMax.\n\n| -1507.057| -657.0571| -157.0571| 0| 567.9429| 2092.943|\n\n#compare\nlm(flipper_length_mm ~ body_mass_g + 1, data = peng)\n\n\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g + 1, data = peng)\n\nCoefficients:\n(Intercept)  body_mass_g  \n   137.0396       0.0152  \n\nlm(flipper_length_mm ~ body_mass_g_cent + 1, data = peng)\n\n\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g_cent + 1, data = peng)\n\nCoefficients:\n     (Intercept)  body_mass_g_cent  \n        200.9670            0.0152  \n\nThis is how to center. The mean is zero\nThis means that instead of running the regression with the original variable, we’re going to run it with the cent one.\nIn the liner modal formula, the left side is your response variable and the right side is your independent variable. It automatically adds an intercept, but you can do it by hand as well. the far right is where you specify the data\nThe estimate for \\(beta_1\\), 0.0152, doesn’t change but the intercept changes and the interpretation of it changes. When X is zero for the first one, that’s the flipper length of a zero mass penguin. When X is zero for the second, that’s the flipper length for an average size penguin, because we moved the mean to 0 by subtracted it from the original formula.\n\n\n\n",
    "preview": "posts/notes/resources/lter_penguins.png",
    "last_modified": "2021-03-03T21:11:05-05:00",
    "input_file": {},
    "preview_width": 1800,
    "preview_height": 1074
  },
  {
    "path": "posts/2017-11-09-visualizing-asset-returns/",
    "title": "Visualizing Asset Returns",
    "description": "In this post we take a closer look at the individual assets which compose a portfolio. The motivation is to make sure we have scrutinized our assets before they get into our portfolio, as once the portfolio has been constructed, it is tempting to keep the analysis at the portfolio level",
    "author": [
      {
        "name": "Jonathan Regenstein",
        "url": "https://www.linkedin.com/in/jkregenstein/"
      }
    ],
    "date": "2017-11-09",
    "categories": [
      "portfolios",
      "highcharts"
    ],
    "contents": "\nHere’s the portfolio we’ll be visualizing the assets of:\nSPY (S&P 500 fund) weighted 25%\nEFA (a non-US equities fund) weighted 25%\nIJS (a small-cap value fund) weighted 20%\nEEM (an emerging-mkts fund) weighted 20%\nAGG (a bond fund) weighted 10%\nLet’s load up our packages.\n\n\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(timetk)\nlibrary(tibbletime)\nlibrary(highcharter)\n\nTo get our objects into the global environment, we use the next code chunk, which should look familiar from the previous post: we will create one xts object and one tibble, in long/tidy format, of monthly log returns.\n\n\n# The symbols vector holds our tickers. \nsymbols <- c(\"SPY\",\"EFA\", \"IJS\", \"EEM\",\"AGG\")\n\nprices <- \n  getSymbols(symbols, src = 'yahoo', from = \"2005-01-01\", \n             auto.assign = TRUE, warnings = FALSE) %>% \n  map(~Ad(get(.))) %>% \n  reduce(merge) %>%\n  `colnames<-`(symbols)\n\n# XTS method\nprices_monthly <- to.monthly(prices, indexAt = \"last\", OHLC = FALSE)\nasset_returns <- na.omit(Return.calculate(prices_monthly, method = \"log\"))\n\n# Tidyverse method, to long, tidy format\nasset_returns_long <- \n  prices %>% \n  to.monthly(indexAt = \"last\", OHLC = FALSE) %>% \n  tk_tbl(preserve_index = TRUE, rename_index = \"date\") %>%\n  gather(asset, returns, -date) %>% \n  group_by(asset) %>%  \n  mutate(returns = (log(returns) - log(lag(returns))))\n\nWe now have two objects holding monthly log returns, asset_returns and asset_returns_long. First, let’s use highcharter to visualize the xts formatted returns.\nHighcharter is fantastic for visualizing a time series or many time series. First, we set highchart(type = \"stock\") to get a nice time series line. Then we add each of our series to the highcharter code flow. In this case, we’ll add our columns from the xts object.\n\n\nhighchart(type = \"stock\") %>% \n  hc_title(text = \"Monthly Log Returns\") %>%\n  hc_add_series(asset_returns$SPY, \n                  name = names(asset_returns$SPY)) %>%\n  hc_add_series(asset_returns$EFA, \n                  name = names(asset_returns$EFA)) %>%\n  hc_add_series(asset_returns$IJS, \n                  name = names(asset_returns$IJS)) %>%\n  hc_add_theme(hc_theme_flat()) %>%\n  hc_navigator(enabled = FALSE) %>% \n  hc_scrollbar(enabled = FALSE)\n\n{\"x\":{\"hc_opts\":{\"title\":{\"text\":\"Monthly Log Returns\"},\"yAxis\":{\"title\":{\"text\":null}},\"credits\":{\"enabled\":false},\"exporting\":{\"enabled\":false},\"plotOptions\":{\"series\":{\"turboThreshold\":0},\"treemap\":{\"layoutAlgorithm\":\"squarified\"},\"bubble\":{\"minSize\":5,\"maxSize\":25}},\"annotationsOptions\":{\"enabledButtons\":false},\"tooltip\":{\"delayForDisplay\":10},\"series\":[{\"data\":[[1109548800000,0.0206885998509705],[1112227200000,-0.0184625235444891],[1114732800000,-0.0189127809130296],[1117497600000,0.0317161056217836],[1120089600000,0.00151408442373935],[1122595200000,0.0375476448371117],[1125446400000,-0.00941909986457556],[1128038400000,0.00799357383622024],[1130716800000,-0.0239347453372565],[1133308800000,0.0430136306843307],[1135900800000,-0.0019151618034261],[1138665600000,0.0237301811751376],[1141084800000,0.00570949429804379],[1143763200000,0.016368647286388],[1146182400000,0.0125530608122375],[1149033600000,-0.0305839501044085],[1151625600000,0.002604661023204],[1154304000000,0.00446825132000495],[1156982400000,0.0215879159392616],[1159488000000,0.0266433905261083],[1162252800000,0.0310304031039061],[1164844800000,0.0196902312699905],[1167350400000,0.0132824853942726],[1170201600000,0.0149281496335405],[1172620800000,-0.01981245015818],[1175212800000,0.0115227416431827],[1177891200000,0.0433422479398393],[1180569600000,0.0333579069469883],[1183075200000,-0.0147288203215217],[1185840000000,-0.0318111867629201],[1188518400000,0.0127514734305061],[1190937600000,0.0379837423693514],[1193788800000,0.0134753089637485],[1196380800000,-0.0395026372459606],[1199059200000,-0.011324502278522],[1201737600000,-0.06236606722213],[1204243200000,-0.0261822809331473],[1206921600000,-0.00898229721935628],[1209513600000,0.046561140239584],[1212105600000,0.0150032706829641],[1214784000000,-0.0872758695749161],[1217462400000,-0.00902651826235967],[1219968000000,0.0153356465110193],[1222732800000,-0.0989074028542705],[1225411200000,-0.180547032636315],[1227830400000,-0.0721480422884282],[1230681600000,0.00974854055586505],[1233273600000,-0.0856820957827145],[1235692800000,-0.113671815600298],[1238457600000,0.0800218996338566],[1241049600000,0.0947152960066147],[1243555200000,0.0568091134844524],[1246320000000,-0.000655146265223117],[1248998400000,0.0719536706175878],[1251676800000,0.0362737945680811],[1254268800000,0.0348430422351855],[1256860800000,-0.0194125853096887],[1259539200000,0.0597839875333861],[1262217600000,0.0189207227598809],[1264723200000,-0.037019481078409],[1267142400000,0.0307181634073297],[1269993600000,0.0590981517543758],[1272585600000,0.0153516773433724],[1275004800000,-0.0827888659799534],[1277856000000,-0.0531276924243214],[1280448000000,0.0660696058001218],[1283212800000,-0.0460238235170181],[1285804800000,0.0857691543589345],[1288310400000,0.0374903585862212],[1291075200000,0],[1293753600000,0.0647124789504074],[1296432000000,0.0230329449478175],[1298851200000,0.0341477316332819],[1301529600000,0.000120034195587593],[1304035200000,0.0285501866970117],[1306800000000,-0.0112780423547099],[1309392000000,-0.0170134082393512],[1311897600000,-0.0202077086918901],[1314748800000,-0.0565444864746425],[1317340800000,-0.0719480836983788],[1320019200000,0.103591426668165],[1322611200000,-0.00407183396600086],[1325203200000,0.010394045563384],[1327968000000,0.045331415345701],[1330473600000,0.0424896950265889],[1333065600000,0.0316574334964255],[1335744000000,-0.00669814446626749],[1338422400000,-0.0619346840698238],[1340928000000,0.0397792450669563],[1343692800000,0.0117600500402659],[1346371200000,0.0247444260362908],[1348790400000,0.0250348718842321],[1351641600000,-0.0183661367441728],[1354233600000,0.00564346761457202],[1356912000000,0.00889526621209047],[1359590400000,0.0499226782480466],[1362009600000,0.0126785380586059],[1364428800000,0.0372678479451238],[1367280000000,0.0190299683264845],[1369958400000,0.0233353525176332],[1372377600000,-0.0134341817902488],[1375228800000,0.0503857303999871],[1377820800000,-0.0304510456398361],[1380499200000,0.0311554606950919],[1383177600000,0.0452666396878874],[1385683200000,0.0292070441046199],[1388448000000,0.0255974663573006],[1391126400000,-0.0358845497725371],[1393545600000,0.0445102146790388],[1396224000000,0.00825953192721229],[1398816000000,0.00692722297292381],[1401408000000,0.0229411924800189],[1404086400000,0.0204332264545251],[1406764800000,-0.0135287951582681],[1409270400000,0.0387048183299896],[1412035200000,-0.0138912530139228],[1414713600000,0.0232777649124296],[1417132800000,0.0271013400960829],[1419984000000,-0.00254022459070136],[1422576000000,-0.0300773609163265],[1424995200000,0.0546821317837836],[1427760000000,-0.015831276474926],[1430352000000,0.00978587555231059],[1432857600000,0.0127742480591042],[1435622400000,-0.0203250313441812],[1438300800000,0.0219060236681701],[1440979200000,-0.0633071178178453],[1443571200000,-0.0253950309668225],[1446163200000,0.0818439175770136],[1448841600000,0.00364847734512619],[1451520000000,-0.0174358759118496],[1454025600000,-0.0510685566509466],[1456704000000,-0.000826373715842266],[1459382400000,0.065098269928364],[1461888000000,0.00393349073184446],[1464652800000,0.0168685257037273],[1467244800000,0.00347185182470788],[1469750400000,0.0358219526058425],[1472601600000,0.00119679563100927],[1475193600000,5.83108959739675e-05],[1477872000000,-0.017488908322016],[1480464000000,0.0361760285271417],[1483056000000,0.0200686688830283],[1485820800000,0.0177364324894072],[1488240000000,0.0385392943763891],[1490918400000,0.00124915528831337],[1493337600000,0.00987726044638038],[1496188800000,0.0140142167990636],[1498780800000,0.00635476669634638],[1501459200000,0.0203458276181356],[1504137600000,0.00291342371470904],[1506643200000,0.0199491202599358],[1509408000000,0.0232906093062928],[1512000000000,0.0301081604972193],[1514505600000,0.0120550554675836],[1517356800000,0.0548282189677503],[1519776000000,-0.037037912298298],[1522281600000,-0.027793246159967],[1525046400000,0.00515485352435441],[1527724800000,0.0240182427336144],[1530230400000,0.00573450148719168],[1532995200000,0.0363767445077467],[1535673600000,0.031421078273862],[1538092800000,0.00592789129347437],[1540944000000,-0.0716080138646786],[1543536000000,0.0183793325577337],[1546214400000,-0.092168443001289],[1548892800000,0.0770217815442145],[1551052800000,0.0349111668395947]],\"name\":\"SPY\"},{\"data\":[[1109548800000,0.0371513906391105],[1112227200000,-0.0265839853826342],[1114732800000,-0.0163088753217058],[1117497600000,-0.00867505032604798],[1120089600000,0.0142257219617976],[1122595200000,0.0295273228473385],[1125446400000,0.0376441971037287],[1128038400000,0.0362784990755252],[1130716800000,-0.0323595944929833],[1133308800000,0.0228480315558892],[1135900800000,0.0505277406023903],[1138665600000,0.0561107734298965],[1141084800000,-0.00702433014131199],[1143763200000,0.039270003038395],[1146182400000,0.0467930629416902],[1149033600000,-0.0389676983585057],[1151625600000,-0.000611704280255143],[1154304000000,0.00807239329519005],[1156982400000,0.0251661263703027],[1159488000000,0.0022165862448742],[1162252800000,0.0368050763305092],[1164844800000,0.0302671209945089],[1167350400000,0.0314714729304475],[1170201600000,0.0138344316405972],[1172620800000,-0.00121297377811347],[1175212800000,0.0285828272338642],[1177891200000,0.0367983079752445],[1180569600000,0.0233484448207246],[1183075200000,-0.00321420233933356],[1185840000000,-0.0231707346786667],[1188518400000,-0.00635588581610591],[1190937600000,0.0518095741541087],[1193788800000,0.0416206352282105],[1196380800000,-0.0369094853441245],[1199059200000,-0.0302660613245775],[1201737600000,-0.0817217060118622],[1204243200000,-0.0102818853102606],[1206921600000,0.00418125571073302],[1209513600000,0.0529540152512746],[1212105600000,0.011801614156473],[1214784000000,-0.0919707004455756],[1217462400000,-0.0337659453386143],[1219968000000,-0.0434047214890327],[1222732800000,-0.121447076779599],[1225411200000,-0.233633596964749],[1227830400000,-0.0658404740380432],[1230681600000,0.0849693993928349],[1233273600000,-0.147706834042],[1235692800000,-0.109676381533177],[1238457600000,0.0805747985518526],[1241049600000,0.109025317366331],[1243555200000,0.123913166249305],[1246320000000,-0.0141488568642218],[1248998400000,0.0956873546722568],[1251676800000,0.0440461253043756],[1254268800000,0.0372621370316737],[1256860800000,-0.0255615747021687],[1259539200000,0.0384627062950895],[1262217600000,0.00707124617662069],[1264723200000,-0.0519790753299261],[1267142400000,0.00266387977903593],[1269993600000,0.0618985330173296],[1272585600000,-0.0284467360122971],[1275004800000,-0.11870235750663],[1277856000000,-0.0208348681031647],[1280448000000,0.10984393347932],[1283212800000,-0.038688957618259],[1285804800000,0.0950550300390729],[1288310400000,0.0373492769548953],[1291075200000,-0.0494393393605339],[1293753600000,0.0798093680626208],[1296432000000,0.0207384844914631],[1298851200000,0.0348824056653334],[1301529600000,-0.0241727611928924],[1304035200000,0.0547328241067797],[1306800000000,-0.0223081571106092],[1309392000000,-0.0121813572206539],[1311897600000,-0.0240651749929937],[1314748800000,-0.0916207470942423],[1317340800000,-0.114382118110314],[1320019200000,0.0919177655167811],[1322611200000,-0.0220041964204292],[1325203200000,-0.0219896485898392],[1327968000000,0.0513539717231368],[1330473600000,0.04719980816393],[1333065600000,0.0041989558904385],[1335744000000,-0.0209875362297902],[1338422400000,-0.118155346791625],[1340928000000,0.0680633345647919],[1343692800000,0.000800390478735036],[1346371200000,0.0314988206588915],[1348790400000,0.026770146135831],[1351641600000,0.0108840569757369],[1354233600000,0.0274292305637234],[1356912000000,0.0428788528183826],[1359590400000,0.0366063992132135],[1362009600000,-0.012969435502733],[1364428800000,0.012969435502733],[1367280000000,0.0489677773910366],[1369958400000,-0.0306555471450323],[1372377600000,-0.0271534529811959],[1375228800000,0.0518603919292344],[1377820800000,-0.0197462199597496],[1380499200000,0.0753384370768448],[1383177600000,0.0320818353154007],[1385683200000,0.00544934902514083],[1388448000000,0.0215237350783815],[1391126400000,-0.0534132567750065],[1393545600000,0.0595049381022896],[1396224000000,-0.00460253650797871],[1398816000000,0.0165293646913431],[1401408000000,0.0158285577884669],[1404086400000,0.00916836264668941],[1406764800000,-0.0263797359350946],[1409270400000,0.00180040799680103],[1412035200000,-0.0395985319115235],[1414713600000,-0.00265482967975039],[1417132800000,0.000625331373701243],[1419984000000,-0.0407436082230679],[1422576000000,0.00622633213822743],[1424995200000,0.0614506217492243],[1427760000000,-0.0143886895895005],[1430352000000,0.0358167079728853],[1432857600000,0.00195242874297641],[1435622400000,-0.0316716768224818],[1438300800000,0.0201143955768375],[1440979200000,-0.0771525586156683],[1443571200000,-0.0451948679361549],[1446163200000,0.0640260044055601],[1448841600000,-0.0075557865482363],[1451520000000,-0.0235889492475132],[1454025600000,-0.0567577931216419],[1456704000000,-0.0339139157631414],[1459382400000,0.0637456968669574],[1461888000000,0.0219751268141999],[1464652800000,-0.000856170804408141],[1467244800000,-0.024494523575314],[1469750400000,0.0390001641934021],[1472601600000,0.00532700248763573],[1475193600000,0.013279006041333],[1477872000000,-0.022403644544235],[1480464000000,-0.0179744855132049],[1483056000000,0.0267059138144492],[1485820800000,0.0323818612472802],[1488240000000,0.0118365067993782],[1490918400000,0.0318056585950952],[1493337600000,0.0239521622779613],[1496188800000,0.0348102329174349],[1498780800000,0.00295593553927009],[1501459200000,0.0261880062633137],[1504137600000,-0.000448388525163601],[1506643200000,0.0233427713255878],[1509408000000,0.0166537149963828],[1512000000000,0.00687002051716412],[1514505600000,0.0133982730067146],[1517356800000,0.0489866135876298],[1519776000000,-0.0495556767851237],[1522281600000,-0.0084317050500422],[1525046400000,0.0150980182147142],[1527724800000,-0.019124324180571],[1530230400000,-0.0159678304070621],[1532995200000,0.0281210336826483],[1535673600000,-0.022611458559024],[1538092800000,0.00960626620307004],[1540944000000,-0.0848343132444169],[1543536000000,0.00495093968654281],[1546214400000,-0.0549817838739335],[1548892800000,0.0642407735096384],[1551052800000,0.0256726915595893]],\"name\":\"EFA\"},{\"data\":[[1109548800000,0.0286093757846611],[1112227200000,-0.0238822118611091],[1114732800000,-0.0525567654275059],[1117497600000,0.0597359903514278],[1120089600000,0.0384082240571479],[1122595200000,0.0567708028290888],[1125446400000,-0.0188803630684822],[1128038400000,0.000488762304941659],[1130716800000,-0.0347111750147846],[1133308800000,0.0479257106733071],[1135900800000,-0.0105976914897083],[1138665600000,0.0838889316436502],[1141084800000,0.00273167356751536],[1143763200000,0.0474200692463986],[1146182400000,0.00178401993754207],[1149033600000,-0.0465788761856238],[1151625600000,0.000422298413666589],[1154304000000,-0.03144665128477],[1156982400000,0.0266838630812174],[1159488000000,0.0117927679580552],[1162252800000,0.053727768775885],[1164844800000,0.0234988329741297],[1167350400000,0.00314715659402154],[1170201600000,0.0211448232074201],[1172620800000,-0.00926943035810979],[1175212800000,0.00901947191634189],[1177891200000,0.0182140851971369],[1180569600000,0.0452970145113261],[1183075200000,-0.0227112774542144],[1185840000000,-0.0646388266395839],[1188518400000,0.0132129283478379],[1190937600000,0.00315433069594917],[1193788800000,0.010547042106432],[1196380800000,-0.0741581848145074],[1199059200000,-0.0072087537823311],[1201737600000,-0.0408225596463083],[1204243200000,-0.0342093940862593],[1206921600000,0.0082205346005253],[1209513600000,0.0260926071945526],[1212105600000,0.0384072871550645],[1214784000000,-0.087924995902616],[1217462400000,0.0283278533920392],[1219968000000,0.0465201912424646],[1222732800000,-0.0493370453455286],[1225411200000,-0.221415388941498],[1227830400000,-0.125533995247553],[1230681600000,0.0637298630807144],[1233273600000,-0.15018196998686],[1235692800000,-0.139558704161035],[1238457600000,0.073262028574185],[1241049600000,0.173026813564785],[1243555200000,0.00667886916902294],[1246320000000,0.0150719457773154],[1248998400000,0.104382770209839],[1251676800000,0.0342331127775668],[1254268800000,0.0411530700856808],[1256860800000,-0.0626640397733333],[1259539200000,0.0286029304529074],[1262217600000,0.0778778839109915],[1264723200000,-0.0256783276837025],[1267142400000,0.0465283585451917],[1269993600000,0.07507895971042],[1272585600000,0.0641682057161592],[1275004800000,-0.0892737170413298],[1277856000000,-0.0863780811226538],[1280448000000,0.0649642296586066],[1283212800000,-0.0824202429066938],[1285804800000,0.103833529852903],[1288310400000,0.0395793355913963],[1291075200000,0.024436005715085],[1293753600000,0.0858592072565436],[1296432000000,-0.0023672095781313],[1298851200000,0.0412456924044129],[1301529600000,0.0218400162352612],[1304035200000,0.0105712765007677],[1306800000000,-0.01781359400431],[1309392000000,-0.0160795241246445],[1311897600000,-0.0281282312096334],[1314748800000,-0.0831288654026014],[1317340800000,-0.111610025503754],[1320019200000,0.142718129188371],[1322611200000,0.00627852243041715],[1325203200000,0.0199986832302308],[1327968000000,0.0760209532990856],[1330473600000,0.0169933419918591],[1333065600000,0.0285565152661569],[1335744000000,-0.0192759354032583],[1338422400000,-0.0744573785296279],[1340928000000,0.0444854916201987],[1343692800000,-0.00688496539791839],[1346371200000,0.0399655862269004],[1348790400000,0.030834177629397],[1351641600000,-0.0198151687061534],[1354233600000,0.0163916131072179],[1356912000000,0.0348942640798384],[1359590400000,0.0521333867145719],[1362009600000,0.0161752891954077],[1364428800000,0.0402581124571002],[1367280000000,0.00122253176213949],[1369958400000,0.0419765063142581],[1372377600000,-0.00140309767256053],[1375228800000,0.0635412090251117],[1377820800000,-0.0347431500630595],[1380499200000,0.0638702890696008],[1383177600000,0.0342343480102869],[1385683200000,0.0416611153670647],[1388448000000,0.0128909038488842],[1391126400000,-0.0357753902872728],[1393545600000,0.0452575430180149],[1396224000000,0.0133144043219566],[1398816000000,-0.0231841889284485],[1401408000000,0.00620531199151308],[1404086400000,0.03771467837083],[1406764800000,-0.0520093367220555],[1409270400000,0.0436577616926286],[1412035200000,-0.0612641451157909],[1414713600000,0.0688747580754479],[1417132800000,0.00477366970101922],[1419984000000,0.0252947224565263],[1422576000000,-0.0546280971891715],[1424995200000,0.0569145435558758],[1427760000000,0.0101588343718326],[1430352000000,-0.0184176030925567],[1432857600000,0.00750971463082983],[1435622400000,0.00416782036540386],[1438300800000,-0.0273752511628675],[1440979200000,-0.0472684427786376],[1443571200000,-0.0384635250043637],[1446163200000,0.0635897987539638],[1448841600000,0.024415001421656],[1451520000000,-0.0521529788334707],[1454025600000,-0.0603068861984033],[1456704000000,0.020605258778656],[1459382400000,0.0899059199020034],[1461888000000,0.0210442421892969],[1464652800000,0.00439711318838842],[1467244800000,0.00829581963604209],[1469750400000,0.049348278492384],[1472601600000,0.0112611697933618],[1475193600000,0.00861489727863241],[1477872000000,-0.0381347623044013],[1480464000000,0.1252463233798],[1483056000000,0.0314933272054549],[1485820800000,-0.012143868007076],[1488240000000,0.0134288335689003],[1490918400000,-0.00653303215811096],[1493337600000,0.00510769076897954],[1496188800000,-0.0228627173441343],[1498780800000,0.029151878484404],[1501459200000,0.00748144268418471],[1504137600000,-0.0275644890306417],[1506643200000,0.0823216684340267],[1509408000000,0.00591606038756343],[1512000000000,0.0369132573642403],[1514505600000,-0.00373129093442071],[1517356800000,0.0131965051008853],[1519776000000,-0.0412612406216466],[1522281600000,0.0135347862565958],[1525046400000,0.0174810398008258],[1527724800000,0.0570389092847776],[1530230400000,0.00796517557832299],[1532995200000,0.0258168043439939],[1535673600000,0.0309127240357006],[1538092800000,-0.031022181798555],[1540944000000,-0.104675116246895],[1543536000000,0.00570402343486087],[1546214400000,-0.1322877869595],[1548892800000,0.115614846962043],[1551052800000,0.0554566456718399]],\"name\":\"IJS\"}],\"navigator\":{\"enabled\":false},\"scrollbar\":{\"enabled\":false}},\"theme\":{\"colors\":[\"#f1c40f\",\"#2ecc71\",\"#9b59b6\",\"#e74c3c\",\"#34495e\",\"#3498db\",\"#1abc9c\",\"#f39c12\",\"#d35400\"],\"chart\":{\"backgroundColor\":\"#ECF0F1\"},\"xAxis\":{\"gridLineDashStyle\":\"Dash\",\"gridLineWidth\":1,\"gridLineColor\":\"#BDC3C7\",\"lineColor\":\"#BDC3C7\",\"minorGridLineColor\":\"#BDC3C7\",\"tickColor\":\"#BDC3C7\",\"tickWidth\":1},\"yAxis\":{\"gridLineDashStyle\":\"Dash\",\"gridLineColor\":\"#BDC3C7\",\"lineColor\":\"#BDC3C7\",\"minorGridLineColor\":\"#BDC3C7\",\"tickColor\":\"#BDC3C7\",\"tickWidth\":1},\"legendBackgroundColor\":\"rgba(0, 0, 0, 0.5)\",\"background2\":\"#505053\",\"dataLabelsColor\":\"#B0B0B3\",\"textColor\":\"#34495e\",\"contrastTextColor\":\"#F0F0F3\",\"maskColor\":\"rgba(255,255,255,0.3)\"},\"conf_opts\":{\"global\":{\"Date\":null,\"VMLRadialGradientURL\":\"http =//code.highcharts.com/list(version)/gfx/vml-radial-gradient.png\",\"canvasToolsURL\":\"http =//code.highcharts.com/list(version)/modules/canvas-tools.js\",\"getTimezoneOffset\":null,\"timezoneOffset\":0,\"useUTC\":true},\"lang\":{\"contextButtonTitle\":\"Chart context menu\",\"decimalPoint\":\".\",\"downloadJPEG\":\"Download JPEG image\",\"downloadPDF\":\"Download PDF document\",\"downloadPNG\":\"Download PNG image\",\"downloadSVG\":\"Download SVG vector image\",\"drillUpText\":\"Back to {series.name}\",\"invalidDate\":null,\"loading\":\"Loading...\",\"months\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"noData\":\"No data to display\",\"numericSymbols\":[\"k\",\"M\",\"G\",\"T\",\"P\",\"E\"],\"printChart\":\"Print chart\",\"resetZoom\":\"Reset zoom\",\"resetZoomTitle\":\"Reset zoom level 1:1\",\"shortMonths\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"thousandsSep\":\" \",\"weekdays\":[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]}},\"type\":\"stock\",\"fonts\":[],\"debug\":false},\"evals\":[],\"jsHooks\":[]}\nTake a look at the chart. It has a line for the monthly log returns of three of our ETFs (and in my opinion, it’s already starting to get crowded). We might be able to pull some useful intuition from this chart. Perhaps one of our ETFs remained stable during the 2008 financial crisis, or had an era of consistently negative/positive returns. Highcharter is great for plotting time series line charts.\nHighcharter does have the capacity for histogram making. One method is to first call the base function hist on the data with the arguments for breaks and plot = FALSE. Then we can call hchart on that object.\n\n\nhc_spy <- hist(asset_returns$SPY, breaks = 50, plot = FALSE)\n\nhchart(hc_spy) %>% \n  hc_title(text = \"SPY Log Returns Distribution\")\n\n{\"x\":{\"hc_opts\":{\"title\":{\"text\":\"SPY Log Returns Distribution\"},\"yAxis\":{\"title\":{\"text\":null}},\"credits\":{\"enabled\":false},\"exporting\":{\"enabled\":false},\"plotOptions\":{\"series\":{\"turboThreshold\":0},\"treemap\":{\"layoutAlgorithm\":\"squarified\"},\"bubble\":{\"minSize\":5,\"maxSize\":25}},\"annotationsOptions\":{\"enabledButtons\":false},\"tooltip\":{\"delayForDisplay\":10,\"formatter\":\"function() { return  this.point.name + '<br/>' + this.y; }\"},\"chart\":{\"zoomType\":\"x\"},\"series\":[{\"data\":[{\"x\":-0.1825,\"y\":1,\"name\":\"(-0.185, -0.18]\"},{\"x\":-0.1775,\"y\":0,\"name\":\"(-0.18, -0.175]\"},{\"x\":-0.1725,\"y\":0,\"name\":\"(-0.175, -0.17]\"},{\"x\":-0.1675,\"y\":0,\"name\":\"(-0.17, -0.165]\"},{\"x\":-0.1625,\"y\":0,\"name\":\"(-0.165, -0.16]\"},{\"x\":-0.1575,\"y\":0,\"name\":\"(-0.16, -0.155]\"},{\"x\":-0.1525,\"y\":0,\"name\":\"(-0.155, -0.15]\"},{\"x\":-0.1475,\"y\":0,\"name\":\"(-0.15, -0.145]\"},{\"x\":-0.1425,\"y\":0,\"name\":\"(-0.145, -0.14]\"},{\"x\":-0.1375,\"y\":0,\"name\":\"(-0.14, -0.135]\"},{\"x\":-0.1325,\"y\":0,\"name\":\"(-0.135, -0.13]\"},{\"x\":-0.1275,\"y\":0,\"name\":\"(-0.13, -0.125]\"},{\"x\":-0.1225,\"y\":0,\"name\":\"(-0.125, -0.12]\"},{\"x\":-0.1175,\"y\":0,\"name\":\"(-0.12, -0.115]\"},{\"x\":-0.1125,\"y\":1,\"name\":\"(-0.115, -0.11]\"},{\"x\":-0.1075,\"y\":0,\"name\":\"(-0.11, -0.105]\"},{\"x\":-0.1025,\"y\":0,\"name\":\"(-0.105, -0.1]\"},{\"x\":-0.0975,\"y\":1,\"name\":\"(-0.1, -0.095]\"},{\"x\":-0.0925,\"y\":1,\"name\":\"(-0.095, -0.09]\"},{\"x\":-0.0875,\"y\":2,\"name\":\"(-0.09, -0.085]\"},{\"x\":-0.0825,\"y\":1,\"name\":\"(-0.085, -0.08]\"},{\"x\":-0.0775,\"y\":0,\"name\":\"(-0.08, -0.075]\"},{\"x\":-0.0725,\"y\":3,\"name\":\"(-0.075, -0.07]\"},{\"x\":-0.0675,\"y\":0,\"name\":\"(-0.07, -0.065]\"},{\"x\":-0.0625,\"y\":3,\"name\":\"(-0.065, -0.06]\"},{\"x\":-0.0575,\"y\":1,\"name\":\"(-0.06, -0.055]\"},{\"x\":-0.0525,\"y\":2,\"name\":\"(-0.055, -0.05]\"},{\"x\":-0.0475,\"y\":1,\"name\":\"(-0.05, -0.045]\"},{\"x\":-0.0425,\"y\":0,\"name\":\"(-0.045, -0.04]\"},{\"x\":-0.0375,\"y\":4,\"name\":\"(-0.04, -0.035]\"},{\"x\":-0.0325,\"y\":4,\"name\":\"(-0.035, -0.03]\"},{\"x\":-0.0275,\"y\":3,\"name\":\"(-0.03, -0.025]\"},{\"x\":-0.0225,\"y\":3,\"name\":\"(-0.025, -0.02]\"},{\"x\":-0.0175,\"y\":9,\"name\":\"(-0.02, -0.015]\"},{\"x\":-0.0125,\"y\":6,\"name\":\"(-0.015, -0.01]\"},{\"x\":-0.00750000000000003,\"y\":4,\"name\":\"(-0.01, -0.00500000000000003]\"},{\"x\":-0.00250000000000002,\"y\":6,\"name\":\"(-0.00500000000000002, -1.38777878078145e-17]\"},{\"x\":0.00249999999999999,\"y\":11,\"name\":\"(-1.38777878078145e-17, 0.00499999999999999]\"},{\"x\":0.00749999999999998,\"y\":13,\"name\":\"(0.00499999999999998, 0.00999999999999998]\"},{\"x\":0.0125,\"y\":12,\"name\":\"(0.00999999999999997, 0.015]\"},{\"x\":0.0175,\"y\":11,\"name\":\"(0.015, 0.02]\"},{\"x\":0.0225,\"y\":14,\"name\":\"(0.02, 0.025]\"},{\"x\":0.0275,\"y\":6,\"name\":\"(0.025, 0.03]\"},{\"x\":0.0325,\"y\":11,\"name\":\"(0.03, 0.035]\"},{\"x\":0.0375,\"y\":11,\"name\":\"(0.035, 0.04]\"},{\"x\":0.0425,\"y\":4,\"name\":\"(0.04, 0.045]\"},{\"x\":0.0475,\"y\":4,\"name\":\"(0.045, 0.05]\"},{\"x\":0.0525,\"y\":3,\"name\":\"(0.05, 0.055]\"},{\"x\":0.0575,\"y\":3,\"name\":\"(0.055, 0.06]\"},{\"x\":0.0625,\"y\":1,\"name\":\"(0.06, 0.065]\"},{\"x\":0.0675,\"y\":2,\"name\":\"(0.065, 0.07]\"},{\"x\":0.0725,\"y\":1,\"name\":\"(0.07, 0.075]\"},{\"x\":0.0775,\"y\":1,\"name\":\"(0.075, 0.08]\"},{\"x\":0.0825,\"y\":2,\"name\":\"(0.08, 0.085]\"},{\"x\":0.0875,\"y\":1,\"name\":\"(0.085, 0.09]\"},{\"x\":0.0925,\"y\":1,\"name\":\"(0.09, 0.095]\"},{\"x\":0.0975,\"y\":0,\"name\":\"(0.095, 0.1]\"},{\"x\":0.1025,\"y\":1,\"name\":\"(0.1, 0.105]\"}],\"type\":\"column\",\"pointRange\":0.005,\"groupPadding\":0,\"pointPadding\":0,\"borderWidth\":0}]},\"theme\":{\"chart\":{\"backgroundColor\":\"transparent\"}},\"conf_opts\":{\"global\":{\"Date\":null,\"VMLRadialGradientURL\":\"http =//code.highcharts.com/list(version)/gfx/vml-radial-gradient.png\",\"canvasToolsURL\":\"http =//code.highcharts.com/list(version)/modules/canvas-tools.js\",\"getTimezoneOffset\":null,\"timezoneOffset\":0,\"useUTC\":true},\"lang\":{\"contextButtonTitle\":\"Chart context menu\",\"decimalPoint\":\".\",\"downloadJPEG\":\"Download JPEG image\",\"downloadPDF\":\"Download PDF document\",\"downloadPNG\":\"Download PNG image\",\"downloadSVG\":\"Download SVG vector image\",\"drillUpText\":\"Back to {series.name}\",\"invalidDate\":null,\"loading\":\"Loading...\",\"months\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"noData\":\"No data to display\",\"numericSymbols\":[\"k\",\"M\",\"G\",\"T\",\"P\",\"E\"],\"printChart\":\"Print chart\",\"resetZoom\":\"Reset zoom\",\"resetZoomTitle\":\"Reset zoom level 1:1\",\"shortMonths\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"thousandsSep\":\" \",\"weekdays\":[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]}},\"type\":\"chart\",\"fonts\":[],\"debug\":false},\"evals\":[\"hc_opts.tooltip.formatter\"],\"jsHooks\":[]}\nNothing wrong with that chart, and it shows us the distribution of SPY returns. However, highcharter is missing an easy way to chart multiple histograms, and to add density lines to those multiple histograms. The functionality is fine for one set of returns, but here we want to see the distribution of all of our returns series together.\nFor that, we will head to the tidyverse and use ggplot2 on our tidy tibble called assets_returns_long. Because it is in long, tidy format, and it is grouped by the ‘asset’ column, we can chart the asset histograms collectively on one chart.\n\n\n# Make so all titles centered in the upcoming ggplots\ntheme_update(plot.title = element_text(hjust = 0.5))\n\nasset_returns_long %>% \n  ggplot(aes(x = returns, fill = asset)) + \n  geom_histogram(alpha = 0.25, binwidth = .01)\n\n\nLet’s use facet_wrap(~asset) to break these out by asset. We can add a title with ggtitle.\n\n\nasset_returns_long %>% \n  ggplot(aes(x = returns, fill = asset)) + \n  geom_histogram(alpha = 0.25, binwidth = .01) + \n  facet_wrap(~asset) + \n  ggtitle(\"Monthly Returns Since 2005\")\n\n\nMaybe we don’t want to use a histogram, but instead want to use a density line to visualize the various distributions. We can use the stat_density(geom = \"line\", alpha = 1) function to do this. The alpha argument is selecting a line thickness. Let’s also add a label to the x and y axes with the xlab and ylab functions.\n\n\nasset_returns_long %>% \n  ggplot(aes(x = returns, colour = asset, fill = asset)) +\n  stat_density(geom = \"line\", alpha = 1) +\n  ggtitle(\"Monthly Returns Since 2005\") +\n  xlab(\"monthly returns\") +\n  ylab(\"distribution\") \n\n\nThat chart is quite digestible, but we can also facet_wrap(~asset) to break the densities out into individual charts.\n\n\nasset_returns_long %>% \n  ggplot(aes(x = returns, colour = asset, fill = asset)) +\n  stat_density(geom = \"line\", alpha = 1) +\n  facet_wrap(~asset) +\n  ggtitle(\"Monthly Returns Since 2005\") +\n  xlab(\"monthly returns\") +\n  ylab(\"distribution\") \n\n\nNow we can combine all of our ggplots into one nice, faceted plot.\nAt the same time, to add to the aesthetic toolkit a bit, we will do some editing to the label colors. First off, let’s choose a different color besides black to be the theme. I will go with cornflower blue, because it’s a nice shade and I don’t see it used very frequently elsewhere. Once we have a color, we can choose the different elements of the chart to change in the the theme function. I make a lot of changes here by way of example but feel free to comment out a few of those lines and see the different options.\n\n\nasset_returns_long %>% \n  ggplot(aes(x = returns, colour = asset, fill = asset)) +\n  stat_density(geom = \"line\", alpha = 1) +\n  geom_histogram(alpha = 0.25, binwidth = .01) +\n  facet_wrap(~asset) +\n  ggtitle(\"Monthly Returns Since 2005\") +\n  xlab(\"monthly returns\") +\n  ylab(\"distribution\") +\n  # Lots of elements can be customized in the theme() function\n  theme(plot.title = element_text(colour = \"cornflowerblue\"),  \n        strip.text.x = element_text(size = 8, colour = \"white\"), \n        strip.background = element_rect(colour = \"white\", \n                                        fill = \"cornflowerblue\"), \n        axis.text.x = element_text(colour = \"cornflowerblue\"), \n        axis.text = element_text(colour = \"cornflowerblue\"), \n        axis.ticks.x = element_line(colour = \"cornflowerblue\"), \n        axis.text.y = element_text(colour = \"cornflowerblue\"), \n        axis.ticks.y = element_line(colour = \"cornflowerblue\"),\n        axis.title = element_text(colour = \"cornflowerblue\"),\n        legend.title = element_text(colour = \"cornflowerblue\"),\n        legend.text = element_text(colour = \"cornflowerblue\")\n        )\n\n\nWe now have one chart, with histograms and line densities broken out for each of our assets. This would scale nicely if we had more assets and wanted to peek at more distributions of returns.\nWe have not done any substantive work today, but the chart of monthly returns is a tool to quickly glance at the data and see if anything unusual jumps out, or some sort of hypothesis comes to mind. We are going to be combining these assets into a portfolio and, once that occurs, we will rarely view the assets in isolation again. Before that leap to portfolio building, it’s a good idea to glance at the portfolio component distributions.\nThat’s all for today. Thanks for reading!\n\n\n",
    "preview": "posts/2017-11-09-visualizing-asset-returns/distill-preview.png",
    "last_modified": "2021-03-03T20:54:00-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 576
  },
  {
    "path": "posts/2017-09-13-asset-volatility/",
    "title": "Asset Contribution to Portfolio Volatility",
    "description": "In this post we explore breaking total portfolio volatility into its constituent parts and investigate how each asset contributes to the volatility.",
    "author": [
      {
        "name": "Jonathan Regenstein",
        "url": "https://www.linkedin.com/in/jkregenstein/"
      }
    ],
    "date": "2017-09-13",
    "categories": [
      "portfolios",
      "highcharts"
    ],
    "contents": "\nOverview\nIn our previous portfolio volatility work, we covered how to import stock prices, convert to returns and set weights, calculate portfolio volatility, and calculate rolling portfolio volatility. Now we want to break that total portfolio volatility into its constituent parts and investigate how each asset contributes to the volatility. Why might we want to do that?\nFor our own risk management purposes, we might want to ensure that our risk isn’t too concentrated in one asset. Not only might this lead to a less-diversified portfolio than we thought we had, but it also might indicate that our initial assumptions about a particular asset were wrong - or, at least, they have become less right as the asset has changed over time.\nSimilarly, if this portfolio is governed by a mandate from, say, an institutional client, that client might have a preference or even a rule that no asset or sector can rise above a certain threshold of risk contribution. That institutional client might require a report like this from each of their outsourced managers, so they can sum the constituents.\nWe’ll start by loading the packages we need for this analysis:\n\n\nlibrary(timetk)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(highcharter)\n\nPreparing the data\nHere we’ll get prices, returns, and set weights for five ETFs.\n\n\nsymbols <- c(\"SPY\",\"IJS\",\"EFA\",\"EEM\",\"AGG\")\n\nprices <- \n  getSymbols(symbols, src = 'yahoo', from = \"2005-01-01\", \n             auto.assign = TRUE, warnings = FALSE) %>% \n  map(~Cl(get(.))) %>% \n  reduce(merge) %>%\n  `colnames<-`(symbols)\n\nprices_monthly <- to.monthly(prices, indexAt = \"first\", OHLC = FALSE)\n\nportfolioComponentReturns <- \n  na.omit(Return.calculate(prices_monthly, method = \"log\"))\n\nw = c(0.25, 0.20, 0.20, 0.25, 0.10)\n\nWe need to build the covariance matrix and calculate portfolio standard deviation.\n\n\ncovariance_matrix <- cov(portfolioComponentReturns)\n\n# Square root of transpose of the weights cross prod covariance\n# matrix returns cross prod weights gives portfolio standard deviation.\nsd_portfolio <- sqrt(t(w) %*% covariance_matrix %*% w)\n\nAnalyzing assets\nLet’s start to look at the individual components.\nThe percentage contribution of asset i is defined as:\n(marginal contribution of asset i * weight of asset i) / portfolio standard deviation\nTo find the marginal contribution of each asset, take the cross-product of the weights vector and the covariance matrix divided by the portfolio standard deviation.\n\n\n# Marginal contribution of each asset. \nmarginal_contribution <- w %*% covariance_matrix / sd_portfolio[1, 1]\n\nNow multiply the marginal contribution of each asset by the weights vector to get total contribution. We can then sum the asset contributions and make sure it’s equal to the total portfolio standard deviation.\n\n\n# Component contributions to risk are the weighted marginal contributions\ncomponent_contribution <- marginal_contribution * w \n\n# This should equal total portfolio vol, or the object `sd_portfolio`\ncomponents_summed <- rowSums(component_contribution)\n\nThe summed components are 0.044266 and the matrix calculation is 0.044266.\nTo get to percentage contribution of each asset, we divide each asset’s contribution by the total portfolio standard deviation.\n\n\n# To get the percentage contribution, divide component contribution by total sd.\ncomponent_percentages <- component_contribution / sd_portfolio[1, 1]\n\nLet’s port this to a tibble for ease of presentation, and we’ll append by_hand to the object because we did the calculations step-by-step.\n\n\npercentage_tibble_by_hand <- \n  tibble(symbols, w, as.vector(component_percentages)) %>% \n  rename(asset = symbols, \n         'portfolio weight' = w, \n         'risk contribution' = `as.vector(component_percentages)`)\n\npercentage_tibble_by_hand\n\n# A tibble: 5 x 3\n  asset `portfolio weight` `risk contribution`\n  <chr>              <dbl>               <dbl>\n1 SPY                 0.25             0.218  \n2 IJS                 0.2              0.218  \n3 EFA                 0.2              0.218  \n4 EEM                 0.25             0.344  \n5 AGG                 0.1              0.00286\n\nAs you might have guessed, we used by_hand in the object name because we could have used a pre-built R function to do all this work.\nThe StdDev function from PerformanceAnalytics will run this same calculation if we pass in the weights and set portfolio_method = \"component\" (recall that if we set portfolio_method = \"single\", the function will return the total portfolio standard deviation, as we saw in our previous work).\nLet’s confirm that the pre-built function returns the same results.\n\n\n# Confirm component contribution to volality.\ncomponent_sd_pre_built <- StdDev(portfolioComponentReturns, weights = w, \n                              portfolio_method = \"component\")\ncomponent_sd_pre_built\n\n$StdDev\n           [,1]\n[1,] 0.04426602\n\n$contribution\n         SPY          IJS          EFA          EEM          AGG \n0.0096289245 0.0096495786 0.0096319513 0.0152291251 0.0001264388 \n\n$pct_contrib_StdDev\n        SPY         IJS         EFA         EEM         AGG \n0.217524070 0.217990661 0.217592449 0.344036478 0.002856341 \n\nThat function returns a list, and one of the elements is $pct_contrib_StdDev, which is the percentage contribution of each asset. Let’s move it to a tibble for ease of presentation.\n\n\n# Port to a tibble.  \npercentages_tibble_pre_built <- \n  component_sd_pre_built$pct_contrib_StdDev %>%\n  tk_tbl(preserve_row_names = FALSE) %>%\n  mutate(asset = symbols) %>%\n  rename('risk contribution' = data) %>% \n  select(asset, everything(), -index)\n\nHas our work checked out? Is percentages_tibble_pre_built showing the same result as component_percentages_tibble_by_hand?\nCompare the two objects\n\n\npercentages_tibble_pre_built\n\n# A tibble: 5 x 2\n  asset `risk contribution`\n  <chr>               <dbl>\n1 SPY               0.218  \n2 IJS               0.218  \n3 EFA               0.218  \n4 EEM               0.344  \n5 AGG               0.00286\n\npercentage_tibble_by_hand\n\n# A tibble: 5 x 3\n  asset `portfolio weight` `risk contribution`\n  <chr>              <dbl>               <dbl>\n1 SPY                 0.25             0.218  \n2 IJS                 0.2              0.218  \n3 EFA                 0.2              0.218  \n4 EEM                 0.25             0.344  \n5 AGG                 0.1              0.00286\n\nHuzzah - our findings seem to be consistent!\n\n\n\nWhile we have the tibbles in front of us, notice that EEM has a 25% weight but contributes 34% to the volatility. That’s not necessarily a bad thing, but we should be aware of it.\nVisualization\nOur substantive work is done, but let’s turn to ggplot for some visualization.\n\n\ncomponent_percent_plot <- \n  ggplot(percentage_tibble_by_hand, aes(asset, `risk contribution`)) +\n  geom_col() + \n  scale_y_continuous(labels = scales::percent) + \n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(plot.subtitle = element_text(hjust = 0.5)) +\n  xlab(\"Asset\") +\n  ylab(\"Percent Contribution to Risk\")\n\ncomponent_percent_plot\n\n\nHow about a chart that compares weights to risk contribution? First we’ll need to gather our tibble to long format, then call ggplot.\n\n\n# gather\npercentage_tibble_by_hand_gather <-\n  percentage_tibble_by_hand %>% \n  gather(type, percent, -asset)\n\n# built ggplot object\nplot_compare_weight_contribution <- \n  ggplot(percentage_tibble_by_hand_gather, \n         aes(x = asset, y = percent, fill = type)) +\n  geom_col(position = 'dodge') + \n  scale_y_continuous(labels = scales::percent) + \n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme(plot.subtitle = element_text(hjust = 0.5))\n\nplot_compare_weight_contribution\n\n\nIt looks like AGG, a bond fund, has done a good job as a volatility dampener. It has a 10% allocation but contributes almost zero to volatility. We’re ignoring returns for now.\nThe largest contributor to the portfolio volatility has been EEM, an emerging market ETF, but have a look at the EEM chart and note that it’s own absolute volatility has been quite low.\n\n\nEEM_sd <- StdDev(portfolioComponentReturns$EEM)\n\nEEM_sd_overtime <- \n  round(rollapply(portfolioComponentReturns$EEM, 20, function(x) StdDev(x)), 4) * 100\n\nhighchart(type = \"stock\") %>%\n  hc_title(text = \"EEM Volatility\") %>%\n  hc_add_series(EEM_sd_overtime, name = \"EEM Vol\") %>%\n  hc_yAxis(labels = list(format = \"{value}%\"), opposite = FALSE) %>%\n  hc_navigator(enabled = FALSE) %>% \n  hc_scrollbar(enabled = FALSE)\n\n{\"x\":{\"hc_opts\":{\"title\":{\"text\":\"EEM Volatility\"},\"yAxis\":{\"title\":{\"text\":null},\"labels\":{\"format\":\"{value}%\"},\"opposite\":false},\"credits\":{\"enabled\":false},\"exporting\":{\"enabled\":false},\"plotOptions\":{\"series\":{\"turboThreshold\":0},\"treemap\":{\"layoutAlgorithm\":\"squarified\"},\"bubble\":{\"minSize\":5,\"maxSize\":25}},\"annotationsOptions\":{\"enabledButtons\":false},\"tooltip\":{\"delayForDisplay\":10},\"series\":[{\"data\":[[1109548800000,null],[1112227200000,null],[1114732800000,null],[1117497600000,null],[1120089600000,null],[1122595200000,null],[1125446400000,null],[1128038400000,null],[1130716800000,null],[1133308800000,null],[1135900800000,null],[1138665600000,null],[1141084800000,null],[1143763200000,null],[1146182400000,null],[1149033600000,null],[1151625600000,null],[1154304000000,null],[1156982400000,null],[1159488000000,6.15],[1162252800000,6.02],[1164844800000,5.6],[1167350400000,5.54],[1170201600000,5.57],[1172620800000,5.71],[1175212800000,5.62],[1177891200000,5.63],[1180569600000,5.49],[1183075200000,5.11],[1185840000000,5.07],[1188518400000,5.04],[1190937600000,4.79],[1193788800000,5],[1196380800000,5.54],[1199059200000,5.56],[1201737600000,5.26],[1204243200000,5.25],[1206921600000,5.4],[1209513600000,5.63],[1212105600000,5.59],[1214784000000,6.2],[1217462400000,6.29],[1219968000000,6.45],[1222732800000,7.39],[1225411200000,9.83],[1227830400000,9.85],[1230681600000,10.07],[1233273600000,10.04],[1235692800000,9.94],[1238457600000,10.8],[1241049600000,11.46],[1243555200000,11.72],[1246320000000,11.29],[1248998400000,11.59],[1251676800000,11.59],[1254268800000,11.72],[1256860800000,11.71],[1259539200000,11.85],[1262217600000,11.67],[1264723200000,11.74],[1267142400000,11.54],[1269993600000,11.63],[1272585600000,11.53],[1275004800000,11.16],[1277856000000,8.68],[1280448000000,8.38],[1283212800000,8.38],[1285804800000,8.09],[1288310400000,7.75],[1291075200000,7.38],[1293753600000,6.91],[1296432000000,6.42],[1298851200000,6.34],[1301529600000,6.09],[1304035200000,6.06],[1306800000000,5.84],[1309392000000,5.79],[1311897600000,5.6],[1314748800000,6.05],[1317340800000,7.31],[1320019200000,8.09],[1322611200000,7.9],[1325203200000,7.98],[1327968000000,8.02],[1330473600000,8.06],[1333065600000,7.78],[1335744000000,7.75],[1338422400000,7.72],[1340928000000,7.74],[1343692800000,7.73],[1346371200000,7.57],[1348790400000,7.65],[1351641600000,7.65],[1354233600000,7.51],[1356912000000,7.62],[1359590400000,7.6],[1362009600000,7.6],[1364428800000,7.6],[1367280000000,7.29],[1369958400000,5.77],[1372377600000,4.94],[1375228800000,4.93],[1377820800000,4.82],[1380499200000,4.47],[1383177600000,4.41],[1385683200000,4.36],[1388448000000,4.35],[1391126400000,4.06],[1393545600000,4.04],[1396224000000,4.13],[1398816000000,4.13],[1401408000000,4.02],[1404086400000,4.03],[1406764800000,4.03],[1409270400000,3.85],[1412035200000,4.26],[1414713600000,4.25],[1417132800000,4.26],[1419984000000,4.41],[1422576000000,4.28],[1424995200000,4.11],[1427760000000,4.12],[1430352000000,4.31],[1432857600000,4.16],[1435622400000,4.13],[1438300800000,4.35],[1440979200000,4.77],[1443571200000,4.42],[1446163200000,4.6],[1448841600000,4.5],[1451520000000,4.59],[1454025600000,4.56],[1456704000000,4.5],[1459382400000,5.45],[1461888000000,5.38],[1464652800000,5.18],[1467244800000,5.26],[1469750400000,5.44],[1472601600000,5.33],[1475193600000,5.37],[1477872000000,5.26],[1480464000000,5.34],[1483056000000,5.06],[1485820800000,5.26],[1488240000000,5.23],[1490918400000,5.07],[1493337600000,4.54],[1496188800000,4.46],[1498780800000,4.3],[1501459200000,4.35],[1504137600000,4.05],[1506643200000,3.75],[1509408000000,3.7],[1512000000000,2.88],[1514505600000,2.87],[1517356800000,2.92],[1519776000000,3.43],[1522281600000,3.33],[1525046400000,3.47],[1527724800000,3.56],[1530230400000,3.81],[1532995200000,3.64],[1535673600000,3.77],[1538092800000,3.56],[1540944000000,4.18],[1543536000000,4.24],[1546214400000,4.38],[1548892800000,4.88],[1551052800000,4.88]],\"name\":\"EEM Vol\"}],\"navigator\":{\"enabled\":false},\"scrollbar\":{\"enabled\":false}},\"theme\":{\"chart\":{\"backgroundColor\":\"transparent\"}},\"conf_opts\":{\"global\":{\"Date\":null,\"VMLRadialGradientURL\":\"http =//code.highcharts.com/list(version)/gfx/vml-radial-gradient.png\",\"canvasToolsURL\":\"http =//code.highcharts.com/list(version)/modules/canvas-tools.js\",\"getTimezoneOffset\":null,\"timezoneOffset\":0,\"useUTC\":true},\"lang\":{\"contextButtonTitle\":\"Chart context menu\",\"decimalPoint\":\".\",\"downloadJPEG\":\"Download JPEG image\",\"downloadPDF\":\"Download PDF document\",\"downloadPNG\":\"Download PNG image\",\"downloadSVG\":\"Download SVG vector image\",\"drillUpText\":\"Back to {series.name}\",\"invalidDate\":null,\"loading\":\"Loading...\",\"months\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"noData\":\"No data to display\",\"numericSymbols\":[\"k\",\"M\",\"G\",\"T\",\"P\",\"E\"],\"printChart\":\"Print chart\",\"resetZoom\":\"Reset zoom\",\"resetZoomTitle\":\"Reset zoom level 1:1\",\"shortMonths\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"thousandsSep\":\" \",\"weekdays\":[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]}},\"type\":\"stock\",\"fonts\":[],\"debug\":false},\"evals\":[],\"jsHooks\":[]}\nEEM has contributed 34% to portfolio volatility, but it hasn’t been very risky over this time period. It’s standard deviation has been 0.0655624. Yet, it is still the riskiest asset in our portfolio. Perhaps this is a safe portfolio? Or perhaps we are in a period of very low volatility (indeed, that is the case according to the VIX and actual realized volatility).\nThat’s all for today. See you next time.\n\n\n",
    "preview": "posts/2017-09-13-asset-volatility/asset-volatility_files/figure-html5/unnamed-chunk-13-1.png",
    "last_modified": "2021-03-03T20:54:00-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 576
  },
  {
    "path": "posts/2017-03-07-quandl-and-forecasting/",
    "title": "Quandl and Forecasting",
    "description": "In this post, we will explore commodity prices using data from Quandl, a repository for both free and paid data sources. We will also get into the forecasting game a bit and think about how best to use dygraphs when visualizing predicted time series as an extension of historical data.",
    "author": [
      {
        "name": "Jonathan Regenstein",
        "url": "https://www.linkedin.com/in/jkregenstein/"
      }
    ],
    "date": "2017-03-07",
    "categories": [
      "forecasting",
      "dygraphs"
    ],
    "contents": "\nOverview\nWelcome to another installment of Reproducible Finance with R. Today we are going to shift focus in recognition of the fact that there’s more to Finance than stock prices, and there’s more to data download than quantmod/getSymbols. We are not going to do anything too complex, but we will expand our toolkit by getting familiar with Quandl, commodity prices, the forecast() function, and some advanced dygraph work.\nBefore we dive in, a few thoughts to frame the notebook underlying this post.\nWe are using oil data from Quandl, but the original data is from FRED. There’s nothing wrong with grabbing the data directly from FRED, of course, and I browse FRED frequently to check out economic data, but I tend to download the data into my RStudio environment using Quandl. I wanted to introduce Quandl today because it’s a nice resource that will be involved in the next few posts in this series. Plus, it’s gaining in popularity, and if you work in the financial industry, you might start to encounter it in your work.\nThis post marks our first foray into the world of predictive modeling, albeit in a very simple way. But the complexity and accuracy of the forecasting methodology we use here is almost irrelevant since I expect that most R coders, whether in industry or otherwise, will have their own proprietary models. Rather, what I want to accomplish here is a framework where models can be inserted, visualized, and scrutinized in the future. I harp on reproducible workflows a lot, and that’s not going to change today because one goal of this Notebook is to house a forecast that can be reproduced in the future (at which point, we will know if the forecast was accurate or not), and then tweaked/criticized/updated/heralded.\nThis post walks through a detailed example of importing, forecasting, and visualizing oil prices. In the near future, I will repeat those steps for gold and copper, and we will examine the relationship between the copper/gold price ratio and interest rates. We are starting simple, but stay tuned.\nLet’s start by loading the packages we’ll need for this post:\n\n\nlibrary(Quandl)\nlibrary(dplyr)\nlibrary(xts)\nlibrary(lubridate)\nlibrary(forecast)\nlibrary(dygraphs)\n\nDownloading the data\nNow, let’s get to the data download! In the chunk below, as we import WTI oil prices, notice that Quanld makes it easy to choose types of objects (raw/dataframe, xts, or zoo), periods (daily, weekly, or monthly) and start/end dates.\n\n\n# Start with daily data. Note that \"type = raw\" will download a data frame.\noil_daily <- Quandl(\"FRED/DCOILWTICO\", type = \"raw\", collapse = \"daily\",  \n                    start_date=\"2006-01-01\", end_date=\"2017-02-28\")\n# Now weekely and let's use xts as the type.\noil_weekly <- Quandl(\"FRED/DCOILWTICO\", type = \"xts\", collapse = \"weekly\",  \n                     start_date=\"2006-01-01\", end_date=\"2017-02-28\")\n# And monthly using xts as the type.\noil_monthly <- Quandl(\"FRED/DCOILWTICO\", type = \"xts\", collapse = \"monthly\",  \n                      start_date=\"2006-01-01\", end_date=\"2017-02-28\")\n\n# Have a quick look at our three  objects. \nstr(oil_daily)\n\n'data.frame':   2809 obs. of  2 variables:\n $ Date : Date, format: \"2017-02-28\" ...\n $ Value: num  54 54 54 54.5 53.6 ...\n - attr(*, \"freq\")= chr \"daily\"\n\nstr(oil_weekly)\n\nAn 'xts' object on 2006-01-08/2017-03-05 containing:\n  Data: num [1:583, 1] 64.2 63.9 68.2 67.8 65.4 ...\n  Indexed by objects of class: [Date] TZ: UTC\n  xts Attributes:  \n NULL\n\nstr(oil_monthly)\n\nAn 'xts' object on Jan 2006/Feb 2017 containing:\n  Data: num [1:134, 1] 67.9 61.4 66.2 71.8 71.4 ...\n  Indexed by objects of class: [yearmon] TZ: UTC\n  xts Attributes:  \n NULL\n\nAlso note that I specified the end date of February 2017. This indicates that the Notebook houses a model that was built and run using data as of February 2017. Without the end date, this Notebook would house a model that was built and run using data as of time t. Which you choose depends how you want the Notebook to function for your team.\nLooking back at those oil price objects, each would work well for the rest of this project, but let’s stick with the monthly data. We will be dealing with the date index quite a bit below, so let’s use the seq() function and mdy() from the lubridate package to put the date into a nicer format.\n\n\nindex(oil_monthly) <- seq(mdy('01/01/2006'), mdy('02/01/2017'), by = 'months')\nhead(index(oil_monthly))\n\n[1] \"2006-01-01\" \"2006-02-01\" \"2006-03-01\" \"2006-04-01\" \"2006-05-01\"\n[6] \"2006-06-01\"\n\nNow we have a cleaner date format. Our base data object is in good shape. As always, we like to have a look at the data in graphical format, so let’s fire up dygraphs. Since we imported an xts object directly from Quandl, we can just plug it straight into the dygraph() function.\n\n\ndygraph(oil_monthly, main = \"Monthly oil Prices\")\n\n{\"x\":{\"attrs\":{\"title\":\"Monthly oil Prices\",\"labels\":[\"month\",\"V1\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60}}},\"scale\":\"monthly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2006-01-01T00:00:00.000Z\",\"2006-02-01T00:00:00.000Z\",\"2006-03-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-05-01T00:00:00.000Z\",\"2006-06-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-08-01T00:00:00.000Z\",\"2006-09-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2006-11-01T00:00:00.000Z\",\"2006-12-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-02-01T00:00:00.000Z\",\"2007-03-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-05-01T00:00:00.000Z\",\"2007-06-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-08-01T00:00:00.000Z\",\"2007-09-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2007-11-01T00:00:00.000Z\",\"2007-12-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-02-01T00:00:00.000Z\",\"2008-03-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-05-01T00:00:00.000Z\",\"2008-06-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-08-01T00:00:00.000Z\",\"2008-09-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2008-11-01T00:00:00.000Z\",\"2008-12-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-02-01T00:00:00.000Z\",\"2009-03-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-05-01T00:00:00.000Z\",\"2009-06-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-08-01T00:00:00.000Z\",\"2009-09-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2009-11-01T00:00:00.000Z\",\"2009-12-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-02-01T00:00:00.000Z\",\"2010-03-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-05-01T00:00:00.000Z\",\"2010-06-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-08-01T00:00:00.000Z\",\"2010-09-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2010-11-01T00:00:00.000Z\",\"2010-12-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-02-01T00:00:00.000Z\",\"2011-03-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-05-01T00:00:00.000Z\",\"2011-06-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-08-01T00:00:00.000Z\",\"2011-09-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2011-11-01T00:00:00.000Z\",\"2011-12-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-02-01T00:00:00.000Z\",\"2012-03-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-05-01T00:00:00.000Z\",\"2012-06-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-08-01T00:00:00.000Z\",\"2012-09-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2012-11-01T00:00:00.000Z\",\"2012-12-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-02-01T00:00:00.000Z\",\"2013-03-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-05-01T00:00:00.000Z\",\"2013-06-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-08-01T00:00:00.000Z\",\"2013-09-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2013-11-01T00:00:00.000Z\",\"2013-12-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-02-01T00:00:00.000Z\",\"2014-03-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-05-01T00:00:00.000Z\",\"2014-06-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-08-01T00:00:00.000Z\",\"2014-09-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2014-11-01T00:00:00.000Z\",\"2014-12-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-02-01T00:00:00.000Z\",\"2015-03-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-05-01T00:00:00.000Z\",\"2015-06-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-08-01T00:00:00.000Z\",\"2015-09-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2015-11-01T00:00:00.000Z\",\"2015-12-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-02-01T00:00:00.000Z\",\"2016-03-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-05-01T00:00:00.000Z\",\"2016-06-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-08-01T00:00:00.000Z\",\"2016-09-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2016-11-01T00:00:00.000Z\",\"2016-12-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-02-01T00:00:00.000Z\"],[67.86,61.37,66.25,71.8,71.42,73.94,74.56,70.38,62.9,58.72,62.97,60.85,58.17,61.78,65.94,65.78,64.02,70.47,78.2,73.98,81.64,94.16,88.6,95.95,91.67,101.78,101.54,113.7,127.35,139.96,124.17,115.55,100.7,68.1,55.21,44.6,41.73,44.15,49.64,50.35,66.31,69.82,69.26,69.97,70.46,77.04,77.19,79.39,72.85,79.72,83.45,86.07,74,75.59,78.85,71.93,79.95,81.45,84.12,91.38,90.99,97.1,106.19,113.39,102.7,95.3,95.68,88.81,78.93,93.19,100.36,98.83,98.46,107.08,103.03,104.89,86.52,85.04,88.08,96.47,92.18,86.23,88.54,91.83,97.65,92.03,97.24,93.22,91.93,96.36,105.1,107.98,102.36,96.29,92.55,98.17,97.55,102.88,101.57,100.07,103.4,106.07,98.23,97.86,91.17,80.53,65.94,53.45,47.79,49.84,47.72,59.62,60.25,59.48,47.11,49.2,45.06,46.6,40.43,37.13,33.66,32.74,36.94,45.98,49.1,48.27,41.54,44.68,47.72,46.83,49.41,53.75,52.75,54]]},\"evals\":[],\"jsHooks\":[]}\nAlright, nothing too shocking here. We see a peak in mid-2008, followed by a precipitous decline through the beginning of 2009.\nForecasting\nNow we’ll make things a bit more interesting and try to extract some meaning from that data. Let’s use the forecast() function to predict what oil prices will look like over the next six months. This is the part of the code where you might want to insert whatever model your team has built or wish to test. We can think of it as a placeholder for any proprietary model or models that could be dropped into this Notebook. For our purposes, we will simply pass in the monthly oil prices object and supply a lookahead parameter of 6. The forecast() function will then supply some interesting numbers about the next six months of oil prices.\n\n\noil_6month <- forecast(oil_monthly, h = 6)\n\n# Let's have a look at the forecast and the 80%/95% confidence levels. \noil_6month\n\n    Point Forecast    Lo 80    Hi 80    Lo 95    Hi 95\n135       53.99987 47.53908 60.46067 44.11894 63.88081\n136       53.99987 44.84351 63.15624 39.99642 68.00333\n137       53.99987 42.76141 65.23834 36.81212 71.18763\n138       53.99987 40.99460 67.00515 34.11002 73.88973\n139       53.99987 39.42782 68.57193 31.71385 76.28590\n140       53.99987 38.00211 69.99764 29.53340 78.46635\n\nThe mean forecast is right around $54. It looks like the 95% confidence level has a high of $78 in August and a low of $29 in March. We won’t dwell on these numbers because I imagine you will want to use your own model here - this Notebook is more of a skeleton where those models can be inserted and then tested or evaluated at a later date.\nVisualizing the results\nLet’s move on to visualizing the results of the forecast along with the historical data. The base plot() function does a decent job here.\n\n\nplot(oil_6month, main = \"Oil Forecast\")\n\n\nThat plot looks OK, but it’s not great. We can see that the mean forecast is to stay around $50, with the 95% bands stretching all the way to around $80 and $30, but honestly, I have to squint to really see those 95% intervals. We don’t like squinting, so let’s put in some extra work to make use of dygraphs, which will have the benefit of allowing a reader to zoom on the predicted portion of the graph.\nThis is where things require a bit more thought. We want one xts object to hold both the historical data and the forecasted prices.\nWe already have our monthly prices in the xts object we imported from Quandl, but the forecasted prices are currently in a list with a different date convention than we would like.\nFirst, let’s move the mean forecast and 95% confidence bands to a dataframe, along with a date column. We predicted oil out six months, so we will need a date column for the six months after February.\n\n\noil_forecast_data <- data.frame(date = seq(mdy('03/01/2017'), \n                                           by = 'months', length.out = 6),\n                                Forecast = oil_6month$mean,\n                                Hi_95 = oil_6month$upper[,2],\n                                Lo_95 = oil_6month$lower[,2])\n\nhead(oil_forecast_data)\n\n        date Forecast    Hi_95    Lo_95\n1 2017-03-01 53.99987 63.88081 44.11894\n2 2017-04-01 53.99987 68.00333 39.99642\n3 2017-05-01 53.99987 71.18763 36.81212\n4 2017-06-01 53.99987 73.88973 34.11002\n5 2017-07-01 53.99987 76.28590 31.71385\n6 2017-08-01 53.99987 78.46635 29.53340\n\nThe data we want is now housed in its own dataframe. Let’s convert that to an xts object.\n\n\noil_forecast_xts <- xts(oil_forecast_data[,-1], order.by = oil_forecast_data[,1])\n\nNow we can combine the historical xts object with the forecasted xts object using cbind().\n\n\n# Combine the xts objects with cbind.\n\noil_combined_xts <- cbind(oil_monthly, oil_forecast_xts)\n\n# Add a nicer name for the first column.\n\ncolnames(oil_combined_xts)[1] <- \"Actual\"\n\n# Have a look at both the head and the tail of our new xts object. Make sure the\n# NAs are correct.\nhead(oil_combined_xts)\n\n           Actual Forecast Hi_95 Lo_95\n2006-01-01  67.86       NA    NA    NA\n2006-02-01  61.37       NA    NA    NA\n2006-03-01  66.25       NA    NA    NA\n2006-04-01  71.80       NA    NA    NA\n2006-05-01  71.42       NA    NA    NA\n2006-06-01  73.94       NA    NA    NA\n\ntail(oil_combined_xts)\n\n           Actual Forecast    Hi_95    Lo_95\n2017-03-01     NA 53.99987 63.88081 44.11894\n2017-04-01     NA 53.99987 68.00333 39.99642\n2017-05-01     NA 53.99987 71.18763 36.81212\n2017-06-01     NA 53.99987 73.88973 34.11002\n2017-07-01     NA 53.99987 76.28590 31.71385\n2017-08-01     NA 53.99987 78.46635 29.53340\n\nIt looks as it should. From January 2006 to February 2017 we have our actual data and NAs for the forecasted data. From March 2017 to August 2017, we have our mean forecast and 95% confidence levels and NAs for actual data. Said another way, we have four time series with observations at different dates, some of which are in the future. Most fortunately, dygraph provides a nice way to plot our actual time series versus our three forecasted time series because it simply does not plot the NAs.\n\n\ndygraph(oil_combined_xts, main = \"Oil Prices: Historical and Forecast\") %>%\n  # Add the actual series\n  dySeries(\"Actual\", label = \"Actual\") %>%\n  # Add the three forecasted series\n  dySeries(c(\"Lo_95\", \"Forecast\", \"Hi_95\"))\n\n{\"x\":{\"attrs\":{\"title\":\"Oil Prices: Historical and Forecast\",\"labels\":[\"month\",\"Actual\",\"Forecast\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60}},\"series\":{\"Actual\":{\"axis\":\"y\"},\"Forecast\":{\"axis\":\"y\"}},\"customBars\":true},\"scale\":\"monthly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2006-01-01T00:00:00.000Z\",\"2006-02-01T00:00:00.000Z\",\"2006-03-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-05-01T00:00:00.000Z\",\"2006-06-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-08-01T00:00:00.000Z\",\"2006-09-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2006-11-01T00:00:00.000Z\",\"2006-12-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-02-01T00:00:00.000Z\",\"2007-03-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-05-01T00:00:00.000Z\",\"2007-06-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-08-01T00:00:00.000Z\",\"2007-09-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2007-11-01T00:00:00.000Z\",\"2007-12-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-02-01T00:00:00.000Z\",\"2008-03-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-05-01T00:00:00.000Z\",\"2008-06-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-08-01T00:00:00.000Z\",\"2008-09-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2008-11-01T00:00:00.000Z\",\"2008-12-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-02-01T00:00:00.000Z\",\"2009-03-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-05-01T00:00:00.000Z\",\"2009-06-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-08-01T00:00:00.000Z\",\"2009-09-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2009-11-01T00:00:00.000Z\",\"2009-12-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-02-01T00:00:00.000Z\",\"2010-03-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-05-01T00:00:00.000Z\",\"2010-06-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-08-01T00:00:00.000Z\",\"2010-09-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2010-11-01T00:00:00.000Z\",\"2010-12-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-02-01T00:00:00.000Z\",\"2011-03-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-05-01T00:00:00.000Z\",\"2011-06-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-08-01T00:00:00.000Z\",\"2011-09-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2011-11-01T00:00:00.000Z\",\"2011-12-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-02-01T00:00:00.000Z\",\"2012-03-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-05-01T00:00:00.000Z\",\"2012-06-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-08-01T00:00:00.000Z\",\"2012-09-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2012-11-01T00:00:00.000Z\",\"2012-12-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-02-01T00:00:00.000Z\",\"2013-03-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-05-01T00:00:00.000Z\",\"2013-06-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-08-01T00:00:00.000Z\",\"2013-09-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2013-11-01T00:00:00.000Z\",\"2013-12-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-02-01T00:00:00.000Z\",\"2014-03-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-05-01T00:00:00.000Z\",\"2014-06-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-08-01T00:00:00.000Z\",\"2014-09-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2014-11-01T00:00:00.000Z\",\"2014-12-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-02-01T00:00:00.000Z\",\"2015-03-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-05-01T00:00:00.000Z\",\"2015-06-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-08-01T00:00:00.000Z\",\"2015-09-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2015-11-01T00:00:00.000Z\",\"2015-12-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-02-01T00:00:00.000Z\",\"2016-03-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-05-01T00:00:00.000Z\",\"2016-06-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-08-01T00:00:00.000Z\",\"2016-09-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2016-11-01T00:00:00.000Z\",\"2016-12-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-02-01T00:00:00.000Z\",\"2017-03-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-05-01T00:00:00.000Z\",\"2017-06-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-08-01T00:00:00.000Z\"],[[67.86,67.86,67.86],[61.37,61.37,61.37],[66.25,66.25,66.25],[71.8,71.8,71.8],[71.42,71.42,71.42],[73.94,73.94,73.94],[74.56,74.56,74.56],[70.38,70.38,70.38],[62.9,62.9,62.9],[58.72,58.72,58.72],[62.97,62.97,62.97],[60.85,60.85,60.85],[58.17,58.17,58.17],[61.78,61.78,61.78],[65.94,65.94,65.94],[65.78,65.78,65.78],[64.02,64.02,64.02],[70.47,70.47,70.47],[78.2,78.2,78.2],[73.98,73.98,73.98],[81.64,81.64,81.64],[94.16,94.16,94.16],[88.6,88.6,88.6],[95.95,95.95,95.95],[91.67,91.67,91.67],[101.78,101.78,101.78],[101.54,101.54,101.54],[113.7,113.7,113.7],[127.35,127.35,127.35],[139.96,139.96,139.96],[124.17,124.17,124.17],[115.55,115.55,115.55],[100.7,100.7,100.7],[68.1,68.1,68.1],[55.21,55.21,55.21],[44.6,44.6,44.6],[41.73,41.73,41.73],[44.15,44.15,44.15],[49.64,49.64,49.64],[50.35,50.35,50.35],[66.31,66.31,66.31],[69.82,69.82,69.82],[69.26,69.26,69.26],[69.97,69.97,69.97],[70.46,70.46,70.46],[77.04,77.04,77.04],[77.19,77.19,77.19],[79.39,79.39,79.39],[72.85,72.85,72.85],[79.72,79.72,79.72],[83.45,83.45,83.45],[86.07,86.07,86.07],[74,74,74],[75.59,75.59,75.59],[78.85,78.85,78.85],[71.93,71.93,71.93],[79.95,79.95,79.95],[81.45,81.45,81.45],[84.12,84.12,84.12],[91.38,91.38,91.38],[90.99,90.99,90.99],[97.1,97.1,97.1],[106.19,106.19,106.19],[113.39,113.39,113.39],[102.7,102.7,102.7],[95.3,95.3,95.3],[95.68,95.68,95.68],[88.81,88.81,88.81],[78.93,78.93,78.93],[93.19,93.19,93.19],[100.36,100.36,100.36],[98.83,98.83,98.83],[98.46,98.46,98.46],[107.08,107.08,107.08],[103.03,103.03,103.03],[104.89,104.89,104.89],[86.52,86.52,86.52],[85.04,85.04,85.04],[88.08,88.08,88.08],[96.47,96.47,96.47],[92.18,92.18,92.18],[86.23,86.23,86.23],[88.54,88.54,88.54],[91.83,91.83,91.83],[97.65,97.65,97.65],[92.03,92.03,92.03],[97.24,97.24,97.24],[93.22,93.22,93.22],[91.93,91.93,91.93],[96.36,96.36,96.36],[105.1,105.1,105.1],[107.98,107.98,107.98],[102.36,102.36,102.36],[96.29,96.29,96.29],[92.55,92.55,92.55],[98.17,98.17,98.17],[97.55,97.55,97.55],[102.88,102.88,102.88],[101.57,101.57,101.57],[100.07,100.07,100.07],[103.4,103.4,103.4],[106.07,106.07,106.07],[98.23,98.23,98.23],[97.86,97.86,97.86],[91.17,91.17,91.17],[80.53,80.53,80.53],[65.94,65.94,65.94],[53.45,53.45,53.45],[47.79,47.79,47.79],[49.84,49.84,49.84],[47.72,47.72,47.72],[59.62,59.62,59.62],[60.25,60.25,60.25],[59.48,59.48,59.48],[47.11,47.11,47.11],[49.2,49.2,49.2],[45.06,45.06,45.06],[46.6,46.6,46.6],[40.43,40.43,40.43],[37.13,37.13,37.13],[33.66,33.66,33.66],[32.74,32.74,32.74],[36.94,36.94,36.94],[45.98,45.98,45.98],[49.1,49.1,49.1],[48.27,48.27,48.27],[41.54,41.54,41.54],[44.68,44.68,44.68],[47.72,47.72,47.72],[46.83,46.83,46.83],[49.41,49.41,49.41],[53.75,53.75,53.75],[52.75,52.75,52.75],[54,54,54],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null]],[[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[null,null,null],[44.1189444260667,53.999874832939,63.8808052398114],[39.9964178033862,53.999874832939,68.0033318624919],[36.8121214596734,53.999874832939,71.1876282062046],[34.1100172541902,53.999874832939,73.8897324116879],[31.7138465538637,53.999874832939,76.2859031120144],[29.5334010405799,53.999874832939,78.4663486252982]]]},\"evals\":[],\"jsHooks\":[]}\nTake a quick look back at our previous graph using the plot() function. At first glance, the dygraph might not seem so different. But, we can now make use of hovering/tooltips and, more importantly, we can zoom in on the forecasted numbers see them much more clearly. Plus, the whole world of dygraph functionality is now available to us!\nThat’s all for today. We have gotten some familiarity with Quandl, used forecast() to predict the next six months of oil prices, and done some data wrangling so we can use our old friend dygraphs. Next time, we will wrap this into a Shiny app so that users can choose their own parameters, and maybe even choose different commodities. See you then!\n\n\n",
    "preview": "posts/2017-03-07-quandl-and-forecasting/preview.png",
    "last_modified": "2021-03-03T20:54:00-05:00",
    "input_file": {},
    "preview_width": 1656,
    "preview_height": 927
  },
  {
    "path": "posts/2016-11-08-sharpe-ratio/",
    "title": "The Sharpe Ratio",
    "description": "In this post we present a classic finance use case using the PerformanceAnalytics, quantmod, and dygraphs packages. We'll demonstrate importing stock data, building a portfolio, and then calculating the Sharpe Ratio.",
    "author": [],
    "date": "2016-11-08",
    "categories": [
      "portfolio theory",
      "dygraphs"
    ],
    "contents": "\n\nContents\nOverview\nSetting up\nPreparing the data\nCalculating portfolio returns\nCalculating the Sharpe Ratio\n\nOverview\nIn this post we’ll demonstrate the calculation of a Sharpe Ratio for a stock portfolio. We’ll start with a function that grabs monthly stock returns and saves those monthly returns as an xts object in the global environment. With that function, we will create three xts objects of monthly returns, and merge those three xts objects into one object, before passing that merged object to dygraphs to peek at the individual stocks.\nThen, we’ll move on to build a portfolio by selecting asset weights and calculating the portfolio monthly returns. Next, we will calculate the growth of a dollar invested in that portfolio (which is what matters to us) over time, and save the results to an xts object. Dygraphs will come in handy again for the portfolio visualizations. Finally, we will calculate the Sharpe Ratio.\nSetting up\nWe start by loading three packages: quantmod to download the data, PerformanceAnalytics to run portfolio calculations, and dygraphs to graph time series objects. We will also create a function to import stock data.\n\n\nlibrary(PerformanceAnalytics)\nlibrary(quantmod)\nlibrary(dygraphs)\n\n# Function to calculate monthly returns on a stock \nmonthly_stock_returns <- function(ticker, start_year) {\n  \n  # Download the data from Yahoo finance\n  symbol <- getSymbols(ticker, src = 'yahoo', \n                       auto.assign = FALSE, warnings = FALSE)\n  \n  # Tranform it to monthly returns using quantmode::periodReturn\n  data <- periodReturn(symbol, period = 'monthly', \n                       subset=paste(start_year, \"::\", sep = \"\"),\n                       type = 'log')\n\n  # Let's rename the column of returns to something intuitive because\n  # the column name is what will eventually be displayed\n  colnames(data) <- as.character(ticker)\n\n  # We want to be able to work with the xts objects so let's explicitly\n  # assign them into the global environment using ticker name \n  assign(ticker, data, .GlobalEnv)\n}\n\n\n\nThe monthly_stock_returns function above takes 2 parameters, a stock symbol and a year. Note that we could have included a third parameter called something like ‘period’ if we wanted the ability to grab periods other than monthly returns. For example, we can envision a desire to look at annual, weekly or daily returns. Here, I force monthly returns because I don’t want to allow different period options. It’s a choice driven by the purpose of this Notebook - which here is focused on monthly returns.\nPreparing the data\nIn the next chunk, we choose three stock tickers and a starting year argument for the monthly_stock_returns function. Then, we merge them into one xts object.\n\n\n# Choose the starting year and assign it to the 'year' variable\nyear <- 2010\n\n# Use the function the monthly returns on 3 stocks, and pass in the 'year'\n# value. Let's choose Google, JP Morgan and Amazon\nmonthly_stock_returns('GOOG', year)\nmonthly_stock_returns('JPM', year)\nmonthly_stock_returns('AMZN', year)\n\n# Merge the 3 monthly return xts objects into 1 xts object.\nmerged_returns <- merge.xts(GOOG, JPM, AMZN)\n\n\n\nLet’s graph the individual performances of each stock over time.\n\n\n# Before we combine these into a portfolio, graph the individual returns\n# and see if anything jumps out as unusual. It looks like something \n# affected Google in March of 2014, but didn't affect JP Morgan or Amazon.\ndygraph(merged_returns, main = \"Google v JP Morgan v Amazon\") %>%\n  dyAxis(\"y\", label = \"%\") %>%\n  dyOptions(colors = RColorBrewer::brewer.pal(3, \"Set2\"))\n\n\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"title\":\"Google v JP Morgan v Amazon\",\"labels\":[\"month\",\"GOOG\",\"JPM\",\"AMZN\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"ylabel\":\"%\",\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colors\":[\"#66C2A5\",\"#FC8D62\",\"#8DA0CB\"],\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false},\"scale\":\"monthly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2010-01-29T00:00:00.000Z\",\"2010-02-26T00:00:00.000Z\",\"2010-03-31T00:00:00.000Z\",\"2010-04-30T00:00:00.000Z\",\"2010-05-28T00:00:00.000Z\",\"2010-06-30T00:00:00.000Z\",\"2010-07-30T00:00:00.000Z\",\"2010-08-31T00:00:00.000Z\",\"2010-09-30T00:00:00.000Z\",\"2010-10-29T00:00:00.000Z\",\"2010-11-30T00:00:00.000Z\",\"2010-12-31T00:00:00.000Z\",\"2011-01-31T00:00:00.000Z\",\"2011-02-28T00:00:00.000Z\",\"2011-03-31T00:00:00.000Z\",\"2011-04-29T00:00:00.000Z\",\"2011-05-31T00:00:00.000Z\",\"2011-06-30T00:00:00.000Z\",\"2011-07-29T00:00:00.000Z\",\"2011-08-31T00:00:00.000Z\",\"2011-09-30T00:00:00.000Z\",\"2011-10-31T00:00:00.000Z\",\"2011-11-30T00:00:00.000Z\",\"2011-12-30T00:00:00.000Z\",\"2012-01-31T00:00:00.000Z\",\"2012-02-29T00:00:00.000Z\",\"2012-03-30T00:00:00.000Z\",\"2012-04-30T00:00:00.000Z\",\"2012-05-31T00:00:00.000Z\",\"2012-06-29T00:00:00.000Z\",\"2012-07-31T00:00:00.000Z\",\"2012-08-31T00:00:00.000Z\",\"2012-09-28T00:00:00.000Z\",\"2012-10-31T00:00:00.000Z\",\"2012-11-30T00:00:00.000Z\",\"2012-12-31T00:00:00.000Z\",\"2013-01-31T00:00:00.000Z\",\"2013-02-28T00:00:00.000Z\",\"2013-03-28T00:00:00.000Z\",\"2013-04-30T00:00:00.000Z\",\"2013-05-31T00:00:00.000Z\",\"2013-06-28T00:00:00.000Z\",\"2013-07-31T00:00:00.000Z\",\"2013-08-30T00:00:00.000Z\",\"2013-09-30T00:00:00.000Z\",\"2013-10-31T00:00:00.000Z\",\"2013-11-29T00:00:00.000Z\",\"2013-12-31T00:00:00.000Z\",\"2014-01-31T00:00:00.000Z\",\"2014-02-28T00:00:00.000Z\",\"2014-03-31T00:00:00.000Z\",\"2014-04-30T00:00:00.000Z\",\"2014-05-30T00:00:00.000Z\",\"2014-06-30T00:00:00.000Z\",\"2014-07-31T00:00:00.000Z\",\"2014-08-29T00:00:00.000Z\",\"2014-09-30T00:00:00.000Z\",\"2014-10-31T00:00:00.000Z\",\"2014-11-28T00:00:00.000Z\",\"2014-12-31T00:00:00.000Z\",\"2015-01-30T00:00:00.000Z\",\"2015-02-27T00:00:00.000Z\",\"2015-03-31T00:00:00.000Z\",\"2015-04-30T00:00:00.000Z\",\"2015-05-29T00:00:00.000Z\",\"2015-06-30T00:00:00.000Z\",\"2015-07-31T00:00:00.000Z\",\"2015-08-31T00:00:00.000Z\",\"2015-09-30T00:00:00.000Z\",\"2015-10-30T00:00:00.000Z\",\"2015-11-30T00:00:00.000Z\",\"2015-12-31T00:00:00.000Z\",\"2016-01-29T00:00:00.000Z\",\"2016-02-29T00:00:00.000Z\",\"2016-03-31T00:00:00.000Z\",\"2016-04-29T00:00:00.000Z\",\"2016-05-31T00:00:00.000Z\",\"2016-06-30T00:00:00.000Z\",\"2016-07-29T00:00:00.000Z\",\"2016-08-31T00:00:00.000Z\",\"2016-09-30T00:00:00.000Z\",\"2016-10-31T00:00:00.000Z\",\"2016-11-30T00:00:00.000Z\",\"2016-12-30T00:00:00.000Z\",\"2017-01-31T00:00:00.000Z\",\"2017-02-28T00:00:00.000Z\",\"2017-03-31T00:00:00.000Z\",\"2017-04-28T00:00:00.000Z\",\"2017-05-31T00:00:00.000Z\",\"2017-06-30T00:00:00.000Z\",\"2017-07-31T00:00:00.000Z\",\"2017-08-31T00:00:00.000Z\",\"2017-09-29T00:00:00.000Z\",\"2017-10-31T00:00:00.000Z\",\"2017-11-30T00:00:00.000Z\",\"2017-12-29T00:00:00.000Z\",\"2018-01-31T00:00:00.000Z\",\"2018-02-28T00:00:00.000Z\",\"2018-03-29T00:00:00.000Z\",\"2018-04-30T00:00:00.000Z\",\"2018-05-31T00:00:00.000Z\",\"2018-06-29T00:00:00.000Z\",\"2018-07-31T00:00:00.000Z\",\"2018-08-31T00:00:00.000Z\",\"2018-09-28T00:00:00.000Z\",\"2018-10-31T00:00:00.000Z\",\"2018-11-30T00:00:00.000Z\",\"2018-12-31T00:00:00.000Z\",\"2019-01-31T00:00:00.000Z\",\"2019-02-28T00:00:00.000Z\",\"2019-03-29T00:00:00.000Z\",\"2019-04-30T00:00:00.000Z\",\"2019-05-31T00:00:00.000Z\",\"2019-06-28T00:00:00.000Z\",\"2019-07-31T00:00:00.000Z\",\"2019-08-30T00:00:00.000Z\",\"2019-09-30T00:00:00.000Z\",\"2019-10-31T00:00:00.000Z\",\"2019-11-29T00:00:00.000Z\",\"2019-12-31T00:00:00.000Z\",\"2020-01-31T00:00:00.000Z\",\"2020-02-28T00:00:00.000Z\",\"2020-03-31T00:00:00.000Z\",\"2020-04-30T00:00:00.000Z\",\"2020-05-29T00:00:00.000Z\",\"2020-06-30T00:00:00.000Z\",\"2020-07-31T00:00:00.000Z\",\"2020-08-31T00:00:00.000Z\",\"2020-09-25T00:00:00.000Z\"],[-0.156923475163864,-0.00594274958091267,0.0737499461929482,-0.0758403106140872,-0.0792836565149338,-0.0874850691368657,0.0858776567053176,-0.0745475722743666,0.15560993776202,0.154604212359134,-0.0992596153230365,0.0665822398969586,0.0107006823193912,0.0214878200115132,-0.0444013866107261,-0.0754828866718376,-0.0281068056871603,-0.0437388508131377,0.175773454069625,-0.109715437236508,-0.0491008351599218,0.140342597646532,0.0113253395766937,0.0747321959935785,-0.107426933825809,0.0636751367376283,0.0365109345532709,-0.0584232700427327,-0.0404707906589692,-0.00136097469857235,0.0872742356432869,0.0791271650290844,0.0965050813929733,-0.103521395791668,0.0262151423274459,0.0128189923723444,0.0660632084800526,0.0584794085647997,-0.00878788024636826,0.0375392942160171,0.0550325279644649,0.0104476908432684,0.00834793993331751,-0.0471075376508994,0.0336807240207494,0.162613663825404,0.0277602337154229,0.0560804493251668,0.0523736672696962,0.0289428136296406,-0.0863761773864875,-0.0559561581085337,0.0611851942757962,0.0271165008587364,-0.00641742881866186,0,0.0100264953653954,-0.0321733612446842,-0.0313402543144855,-0.0288909258659215,0.0153077889166496,0.0437063261153709,-0.0188002577785453,-0.0169024347636116,-0.009780884820959,-0.0220410873176788,0.183918030403215,-0.011834243379955,-0.0160275013881256,0.155539757009479,0.0437523474012208,0.0216861592938289,-0.021214904863745,-0.0627391996243569,0.0654275539119852,-0.072272674611784,0.0598051286153989,-0.0611191529746793,0.105087402500263,-0.00226584902458011,0.0132615101578522,0.00928404791743199,-0.034361405045321,0.0180152456099293,0.0318397570937192,0.0326202305068949,0.00768407844732035,0.0880997419073346,0.0629878183060995,-0.05993499920398,0.0236740777385942,0.0094447971838802,0.0208388822153213,0.0582526103541297,0.00468091237958305,0.0241717254234942,0.111596690356899,-0.0573514718959657,-0.0683057473384113,-0.0141136308599308,0.0643891962242456,0.0278664550670846,0.087165223290871,0.000763662619970093,-0.0205010960935714,-0.102899168260373,0.0162678913644982,-0.0552431185295555,0.0750917351489731,0.00317494772164243,0.0465715711926603,0.0128462982483188,-0.0740704116296728,-0.0208014408824221,0.118322571751589,-0.0237705098716413,0.02567547821735,0.0331681563372692,0.034973352241521,0.0242709127517643,0.0701848340578301,-0.068458649818629,-0.141329915732929,0.148271991785741,0.0578074128463569,-0.0107722394439069,0.0478933586157896,0.0971011183936204,-0.123059570003578],[-0.0677594231746815,0.0749331269085229,0.0641363435488222,-0.0497067382851234,-0.0730607157307516,-0.0780025362579037,0.095533588577059,-0.102385746212117,0.0456945913302789,-0.0113622569624197,-0.00613087328346648,0.125949144092543,0.057708342516328,0.0382017430596914,-0.012717080946329,-0.0102474897639365,-0.0537993778302421,-0.0546584832173214,-0.0120408875807746,-0.0741269872622494,-0.220750244831906,0.143277806727567,-0.115448281163992,0.0710358054060645,0.114938532738255,0.0507033858254425,0.158509833669475,-0.0674716281206711,-0.25969211425067,0.0749478950716236,0.00752826642079159,0.0311755905433013,0.0861134959797987,0.0292133724659014,-0.0144999636992634,0.0679861721896497,0.0677032388419057,0.0389754251584931,-0.030299039998654,0.0321370881762147,0.107826397680209,-0.0335289180151601,0.0541968038029388,-0.0979514020678516,0.0226971203482526,-0.00290609523522141,0.104545280471746,0.021781310343152,-0.0548274860685252,0.0260310470530441,0.0662200362445498,-0.0811139285832842,-0.00735099679547753,0.0362262250094673,0.000867360645947188,0.0303985670104041,0.0132009767345203,0.00397611517910871,-0.00530505222969323,0.0394380905582436,-0.14044931260639,0.11945705152036,-0.011488670500511,0.0432883476486606,0.0390626392967743,0.0296562543010153,0.0112995111458456,-0.0668272582802071,-0.0500623764041423,0.0523997674540955,0.0371233341072642,-0.00979588882074462,-0.104132856510265,-0.0552817951679289,0.050564822175977,0.0650449774159643,0.0322281497086055,-0.0491425788119945,0.0290243512221665,0.0537133587841103,-0.0135732418250343,0.0393132117975222,0.1462817872569,0.0735643730011722,-0.019424949875453,0.0683861941106749,-0.0311580401203875,-0.00960881356929515,-0.0573612498255978,0.106698631512956,0.00436682996424063,-0.00996235717781431,0.0495810018584932,0.0520206912564674,0.0381267457064417,0.0228895362728906,0.0784733437940807,-0.0014707620548938,-0.0490629195456161,-0.0108801256142838,-0.0164051780731966,-0.0266102062002726,0.0981851245824074,-0.00322393867540182,-0.0153024357501124,-0.0344395265671245,0.019709143584139,-0.130158046511978,0.0584891915150154,0.00827485714531927,-0.0304512846045996,0.136625973325229,-0.0909595036050268,0.0536499325882847,0.0368786035517346,-0.0543833540893963,0.0688472288663998,0.0596194505212631,0.0533085315169692,0.0563654073632153,-0.0518219646762515,-0.130987464357127,-0.254395089238461,0.061702145122288,0.0160566561457605,-0.0339688830271471,0.0270598685849448,0.0360756793944208,-0.0694278633401317],[-0.0701245148760827,-0.0575196623895439,0.136893567731982,0.00974832325816504,-0.0887236556340148,-0.138256593425397,0.0760215965490202,0.0572008498631966,0.229675057527992,0.0507105332414788,0.059730627276336,0.0258878051596539,-0.0592783121786566,0.0212879125458854,0.038712388935758,0.0834659509080555,0.0044841043288335,0.03889020355271,0.0844979042002083,-0.0333097979916867,0.00463543229566491,-0.0126589909258005,-0.104679033802036,-0.105135115914938,0.116254145618996,-0.0788904873945619,0.119556088284576,0.135516975035046,-0.0854366583959824,0.0700100059141801,0.0214456259799021,0.0621916878529422,0.0240764643876195,-0.0880271093350996,0.0790612576392142,-0.00469263568793493,0.0566799839388883,-0.0046435745162769,0.00836541575914156,-0.0487507341974534,0.0588686946196899,0.0310507484367332,0.0813355073197074,-0.0695573665313368,0.106768885260724,0.152183862243067,0.0781496851166951,0.0130490209232016,-0.105976473840373,0.00946192206609069,-0.0737087036322837,-0.100756471692138,0.0273091599667819,0.0383836089739706,-0.0369768177598495,0.0799469118674444,-0.0502010424474244,-0.0540982709395649,0.103118832828954,-0.0872369283148209,0.133092253612408,0.0697992614510298,-0.0214295757788365,0.12532119723544,0.0175090827120903,0.011258945233946,0.211162140770996,-0.0443525909565236,-0.00195163896276899,0.201080864764985,0.0602955732152581,0.0165441376110926,-0.141005543273693,-0.0605351517985533,0.071783432265913,0.105345370506125,0.0915002222973983,-0.00996940026729571,0.0586021212098462,0.0135475611376259,0.0848953947219124,-0.0583892896398108,-0.0509721530584146,-0.000933075697601464,0.0936393869486938,0.0258446990267002,0.0479422834635129,0.0424566948881004,0.0725778338055346,-0.0271286623612071,0.0202279429701722,-0.0072954255044279,-0.0198260830888692,0.139515480102502,0.0626576785252975,-0.00620577137162303,0.21562654165298,0.0415536485469599,-0.044003454669149,0.078880245905968,0.0397392443731141,0.0421637701719449,0.0446634677481587,0.124307959658484,-0.00483599663227122,-0.225886945279117,0.0560700302202712,-0.11805158115918,0.134808073899251,-0.0469930832703517,0.0824420727817719,0.0786806530561674,-0.0818754485843349,0.0646557962234502,-0.0142805875211673,-0.0496880955663823,-0.0229951503215157,0.0232034251318763,0.013495821526094,0.0257863331642647,0.0834803178753701,-0.0642332179015806,0.0344212866895726,0.238150516322155,-0.0128673467032408,0.121834149458665,0.137248846426532,0.0866005187520025,-0.10882257122011]],\"fixedtz\":false,\"tzone\":\"UTC\"},\"evals\":[],\"jsHooks\":[]}\nNothing earth-shattering thus far: we have an xts object of three time series and have seen that one of them had weird behavior in April of 2014 (a Google stock split). We’ll ignore that behavior for this example and go on to constructing a portfolio.\nCalculating portfolio returns\nHere we’ll find the monthly returns of a weighted combination of assets. Unsurprisingly, we start out by choosing those weights.\n\n\n# We have the 3 monthly returns saved in 1 object.\n# Now, let's choose the respective weights of those 3.\n# Here we'll allocate 25% to Google, 25% to JP Morgan and 50% to Amazon.\nw <- c(.25, .25, .50)\n\n# Now use the built in PerformanceAnalytics function Return.portfolio\n# to calculate the monthly returns on the portfolio,\nportfolio_monthly_returns <- Return.portfolio(merged_returns, weights = w)\n\n# Use dygraphs to chart the portfolio monthly returns.\ndygraph(portfolio_monthly_returns, main = \"Portfolio Monthly Return\") %>%\n  dyAxis(\"y\", label = \"%\")\n\n\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60},\"y\":[]},\"title\":\"Portfolio Monthly Return\",\"labels\":[\"month\",\"portfolio.returns\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"ylabel\":\"%\"},\"scale\":\"monthly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2010-01-29T00:00:00.000Z\",\"2010-02-26T00:00:00.000Z\",\"2010-03-31T00:00:00.000Z\",\"2010-04-30T00:00:00.000Z\",\"2010-05-28T00:00:00.000Z\",\"2010-06-30T00:00:00.000Z\",\"2010-07-30T00:00:00.000Z\",\"2010-08-31T00:00:00.000Z\",\"2010-09-30T00:00:00.000Z\",\"2010-10-29T00:00:00.000Z\",\"2010-11-30T00:00:00.000Z\",\"2010-12-31T00:00:00.000Z\",\"2011-01-31T00:00:00.000Z\",\"2011-02-28T00:00:00.000Z\",\"2011-03-31T00:00:00.000Z\",\"2011-04-29T00:00:00.000Z\",\"2011-05-31T00:00:00.000Z\",\"2011-06-30T00:00:00.000Z\",\"2011-07-29T00:00:00.000Z\",\"2011-08-31T00:00:00.000Z\",\"2011-09-30T00:00:00.000Z\",\"2011-10-31T00:00:00.000Z\",\"2011-11-30T00:00:00.000Z\",\"2011-12-30T00:00:00.000Z\",\"2012-01-31T00:00:00.000Z\",\"2012-02-29T00:00:00.000Z\",\"2012-03-30T00:00:00.000Z\",\"2012-04-30T00:00:00.000Z\",\"2012-05-31T00:00:00.000Z\",\"2012-06-29T00:00:00.000Z\",\"2012-07-31T00:00:00.000Z\",\"2012-08-31T00:00:00.000Z\",\"2012-09-28T00:00:00.000Z\",\"2012-10-31T00:00:00.000Z\",\"2012-11-30T00:00:00.000Z\",\"2012-12-31T00:00:00.000Z\",\"2013-01-31T00:00:00.000Z\",\"2013-02-28T00:00:00.000Z\",\"2013-03-28T00:00:00.000Z\",\"2013-04-30T00:00:00.000Z\",\"2013-05-31T00:00:00.000Z\",\"2013-06-28T00:00:00.000Z\",\"2013-07-31T00:00:00.000Z\",\"2013-08-30T00:00:00.000Z\",\"2013-09-30T00:00:00.000Z\",\"2013-10-31T00:00:00.000Z\",\"2013-11-29T00:00:00.000Z\",\"2013-12-31T00:00:00.000Z\",\"2014-01-31T00:00:00.000Z\",\"2014-02-28T00:00:00.000Z\",\"2014-03-31T00:00:00.000Z\",\"2014-04-30T00:00:00.000Z\",\"2014-05-30T00:00:00.000Z\",\"2014-06-30T00:00:00.000Z\",\"2014-07-31T00:00:00.000Z\",\"2014-08-29T00:00:00.000Z\",\"2014-09-30T00:00:00.000Z\",\"2014-10-31T00:00:00.000Z\",\"2014-11-28T00:00:00.000Z\",\"2014-12-31T00:00:00.000Z\",\"2015-01-30T00:00:00.000Z\",\"2015-02-27T00:00:00.000Z\",\"2015-03-31T00:00:00.000Z\",\"2015-04-30T00:00:00.000Z\",\"2015-05-29T00:00:00.000Z\",\"2015-06-30T00:00:00.000Z\",\"2015-07-31T00:00:00.000Z\",\"2015-08-31T00:00:00.000Z\",\"2015-09-30T00:00:00.000Z\",\"2015-10-30T00:00:00.000Z\",\"2015-11-30T00:00:00.000Z\",\"2015-12-31T00:00:00.000Z\",\"2016-01-29T00:00:00.000Z\",\"2016-02-29T00:00:00.000Z\",\"2016-03-31T00:00:00.000Z\",\"2016-04-29T00:00:00.000Z\",\"2016-05-31T00:00:00.000Z\",\"2016-06-30T00:00:00.000Z\",\"2016-07-29T00:00:00.000Z\",\"2016-08-31T00:00:00.000Z\",\"2016-09-30T00:00:00.000Z\",\"2016-10-31T00:00:00.000Z\",\"2016-11-30T00:00:00.000Z\",\"2016-12-30T00:00:00.000Z\",\"2017-01-31T00:00:00.000Z\",\"2017-02-28T00:00:00.000Z\",\"2017-03-31T00:00:00.000Z\",\"2017-04-28T00:00:00.000Z\",\"2017-05-31T00:00:00.000Z\",\"2017-06-30T00:00:00.000Z\",\"2017-07-31T00:00:00.000Z\",\"2017-08-31T00:00:00.000Z\",\"2017-09-29T00:00:00.000Z\",\"2017-10-31T00:00:00.000Z\",\"2017-11-30T00:00:00.000Z\",\"2017-12-29T00:00:00.000Z\",\"2018-01-31T00:00:00.000Z\",\"2018-02-28T00:00:00.000Z\",\"2018-03-29T00:00:00.000Z\",\"2018-04-30T00:00:00.000Z\",\"2018-05-31T00:00:00.000Z\",\"2018-06-29T00:00:00.000Z\",\"2018-07-31T00:00:00.000Z\",\"2018-08-31T00:00:00.000Z\",\"2018-09-28T00:00:00.000Z\",\"2018-10-31T00:00:00.000Z\",\"2018-11-30T00:00:00.000Z\",\"2018-12-31T00:00:00.000Z\",\"2019-01-31T00:00:00.000Z\",\"2019-02-28T00:00:00.000Z\",\"2019-03-29T00:00:00.000Z\",\"2019-04-30T00:00:00.000Z\",\"2019-05-31T00:00:00.000Z\",\"2019-06-28T00:00:00.000Z\",\"2019-07-31T00:00:00.000Z\",\"2019-08-30T00:00:00.000Z\",\"2019-09-30T00:00:00.000Z\",\"2019-10-31T00:00:00.000Z\",\"2019-11-29T00:00:00.000Z\",\"2019-12-31T00:00:00.000Z\",\"2020-01-31T00:00:00.000Z\",\"2020-02-28T00:00:00.000Z\",\"2020-03-31T00:00:00.000Z\",\"2020-04-30T00:00:00.000Z\",\"2020-05-29T00:00:00.000Z\",\"2020-06-30T00:00:00.000Z\",\"2020-07-31T00:00:00.000Z\",\"2020-08-31T00:00:00.000Z\",\"2020-09-25T00:00:00.000Z\"],[-0.0912329820226776,-0.011588982191268,0.101872598776065,-0.025720524817289,-0.0825732965952479,-0.111276318725566,0.0835846802859876,-0.0165645995799018,0.167403015733401,0.058128300538135,0.0097420341251,0.0550499358463743,-0.0188609627718943,0.0254034964018344,0.00876471867375406,0.0295662205203198,-0.0146937726068812,0.00375939998589492,0.0797468382561011,-0.0549880276118979,-0.0465181942768634,0.037252668911768,-0.0846399324523329,-0.039189242666973,0.0639642660881099,-0.0265463690144799,0.109793932865893,0.0536178433438788,-0.110299689295371,0.057080545304947,0.0311657595753718,0.0605941207151006,0.0475782337092243,-0.0727533518323087,0.0523284767428425,0.0105466275231523,0.0603897837422012,0.0151565440235142,-0.00197658353317087,-0.0174716167615456,0.0669497170028621,0.0145595343786769,0.0612484085288638,-0.0701792960427091,0.0773807469652159,0.128725433432546,0.0718763820306785,0.0226301490321545,-0.0668846267124401,0.0163337914158352,-0.0551912894583145,-0.0875451649418648,0.0289727625604941,0.0353861004147398,-0.023537135048717,0.0525491568765393,-0.0260178599358966,-0.0388297692285209,0.0517906329420024,-0.0527404790045424,0.0551282675884852,0.0719225043776599,-0.0192796817540491,0.0824824842309901,0.015750748456399,0.00809768130781441,0.17355804353257,-0.0416842448919723,-0.0111750172337142,0.173044321865371,0.0545451320034718,0.0143981634343322,-0.115125013201448,-0.0603713373961802,0.0680564876626826,0.0653654893527775,0.0792508696037866,-0.0229509022197711,0.0630772924333125,0.0149776327457951,0.062421955670624,-0.0379283858162481,-0.0271161320919227,0.0115933382814009,0.0682014230688663,0.0321562875697596,0.0313961037108836,0.0434533315125958,0.0562923594739815,-0.0190461910896639,0.0189676296235293,-0.00492512435738846,-0.00549063180328679,0.115700863148428,0.0507970343298023,0.00156594503116114,0.184215767137251,0.0228590095949037,-0.0477459054844236,0.0578166693826099,0.0375041626347967,0.0343085176178191,0.054375730542944,0.0974907973569297,-0.00748311865935347,-0.196819843473925,0.0475513235597855,-0.111334808702717,0.120083604746496,-0.0359517805373709,0.067730208861017,0.0747937740442957,-0.0816923929698289,0.0532073594364639,0.00519881341433281,-0.0467932009049613,-0.00875328039876277,0.0279228471568307,0.0202127060737287,0.0285932364659449,0.0679550686509944,-0.0708159550876065,-0.0140683035138599,0.216149991749553,-0.00325854899126776,0.0970806192390337,0.122075071636599,0.0853584562162863,-0.108563498823279]]},\"evals\":[],\"jsHooks\":[]}\nNow, instead of looking at monthly returns, let’s look at how $1 would have grown in this portfolio.\n\n\n# Add the wealth.index = TRUE argument and, instead of monthly returns,\n# the function will return the growth of $1 invested in the portfolio.\ndollar_growth <- Return.portfolio(merged_returns, weights = w, \n                                  wealth.index = TRUE)\n\n# Use dygraphs to chart the growth of $1 in the portfolio.\ndygraph(dollar_growth, main = \"Growth of $1 Invested in Portfolio\") %>%\n  dyAxis(\"y\", label = \"$\")\n\n\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60},\"y\":[]},\"title\":\"Growth of $1 Invested in Portfolio\",\"labels\":[\"month\",\"portfolio.wealthindex\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"ylabel\":\"$\"},\"scale\":\"monthly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2010-01-29T00:00:00.000Z\",\"2010-02-26T00:00:00.000Z\",\"2010-03-31T00:00:00.000Z\",\"2010-04-30T00:00:00.000Z\",\"2010-05-28T00:00:00.000Z\",\"2010-06-30T00:00:00.000Z\",\"2010-07-30T00:00:00.000Z\",\"2010-08-31T00:00:00.000Z\",\"2010-09-30T00:00:00.000Z\",\"2010-10-29T00:00:00.000Z\",\"2010-11-30T00:00:00.000Z\",\"2010-12-31T00:00:00.000Z\",\"2011-01-31T00:00:00.000Z\",\"2011-02-28T00:00:00.000Z\",\"2011-03-31T00:00:00.000Z\",\"2011-04-29T00:00:00.000Z\",\"2011-05-31T00:00:00.000Z\",\"2011-06-30T00:00:00.000Z\",\"2011-07-29T00:00:00.000Z\",\"2011-08-31T00:00:00.000Z\",\"2011-09-30T00:00:00.000Z\",\"2011-10-31T00:00:00.000Z\",\"2011-11-30T00:00:00.000Z\",\"2011-12-30T00:00:00.000Z\",\"2012-01-31T00:00:00.000Z\",\"2012-02-29T00:00:00.000Z\",\"2012-03-30T00:00:00.000Z\",\"2012-04-30T00:00:00.000Z\",\"2012-05-31T00:00:00.000Z\",\"2012-06-29T00:00:00.000Z\",\"2012-07-31T00:00:00.000Z\",\"2012-08-31T00:00:00.000Z\",\"2012-09-28T00:00:00.000Z\",\"2012-10-31T00:00:00.000Z\",\"2012-11-30T00:00:00.000Z\",\"2012-12-31T00:00:00.000Z\",\"2013-01-31T00:00:00.000Z\",\"2013-02-28T00:00:00.000Z\",\"2013-03-28T00:00:00.000Z\",\"2013-04-30T00:00:00.000Z\",\"2013-05-31T00:00:00.000Z\",\"2013-06-28T00:00:00.000Z\",\"2013-07-31T00:00:00.000Z\",\"2013-08-30T00:00:00.000Z\",\"2013-09-30T00:00:00.000Z\",\"2013-10-31T00:00:00.000Z\",\"2013-11-29T00:00:00.000Z\",\"2013-12-31T00:00:00.000Z\",\"2014-01-31T00:00:00.000Z\",\"2014-02-28T00:00:00.000Z\",\"2014-03-31T00:00:00.000Z\",\"2014-04-30T00:00:00.000Z\",\"2014-05-30T00:00:00.000Z\",\"2014-06-30T00:00:00.000Z\",\"2014-07-31T00:00:00.000Z\",\"2014-08-29T00:00:00.000Z\",\"2014-09-30T00:00:00.000Z\",\"2014-10-31T00:00:00.000Z\",\"2014-11-28T00:00:00.000Z\",\"2014-12-31T00:00:00.000Z\",\"2015-01-30T00:00:00.000Z\",\"2015-02-27T00:00:00.000Z\",\"2015-03-31T00:00:00.000Z\",\"2015-04-30T00:00:00.000Z\",\"2015-05-29T00:00:00.000Z\",\"2015-06-30T00:00:00.000Z\",\"2015-07-31T00:00:00.000Z\",\"2015-08-31T00:00:00.000Z\",\"2015-09-30T00:00:00.000Z\",\"2015-10-30T00:00:00.000Z\",\"2015-11-30T00:00:00.000Z\",\"2015-12-31T00:00:00.000Z\",\"2016-01-29T00:00:00.000Z\",\"2016-02-29T00:00:00.000Z\",\"2016-03-31T00:00:00.000Z\",\"2016-04-29T00:00:00.000Z\",\"2016-05-31T00:00:00.000Z\",\"2016-06-30T00:00:00.000Z\",\"2016-07-29T00:00:00.000Z\",\"2016-08-31T00:00:00.000Z\",\"2016-09-30T00:00:00.000Z\",\"2016-10-31T00:00:00.000Z\",\"2016-11-30T00:00:00.000Z\",\"2016-12-30T00:00:00.000Z\",\"2017-01-31T00:00:00.000Z\",\"2017-02-28T00:00:00.000Z\",\"2017-03-31T00:00:00.000Z\",\"2017-04-28T00:00:00.000Z\",\"2017-05-31T00:00:00.000Z\",\"2017-06-30T00:00:00.000Z\",\"2017-07-31T00:00:00.000Z\",\"2017-08-31T00:00:00.000Z\",\"2017-09-29T00:00:00.000Z\",\"2017-10-31T00:00:00.000Z\",\"2017-11-30T00:00:00.000Z\",\"2017-12-29T00:00:00.000Z\",\"2018-01-31T00:00:00.000Z\",\"2018-02-28T00:00:00.000Z\",\"2018-03-29T00:00:00.000Z\",\"2018-04-30T00:00:00.000Z\",\"2018-05-31T00:00:00.000Z\",\"2018-06-29T00:00:00.000Z\",\"2018-07-31T00:00:00.000Z\",\"2018-08-31T00:00:00.000Z\",\"2018-09-28T00:00:00.000Z\",\"2018-10-31T00:00:00.000Z\",\"2018-11-30T00:00:00.000Z\",\"2018-12-31T00:00:00.000Z\",\"2019-01-31T00:00:00.000Z\",\"2019-02-28T00:00:00.000Z\",\"2019-03-29T00:00:00.000Z\",\"2019-04-30T00:00:00.000Z\",\"2019-05-31T00:00:00.000Z\",\"2019-06-28T00:00:00.000Z\",\"2019-07-31T00:00:00.000Z\",\"2019-08-30T00:00:00.000Z\",\"2019-09-30T00:00:00.000Z\",\"2019-10-31T00:00:00.000Z\",\"2019-11-29T00:00:00.000Z\",\"2019-12-31T00:00:00.000Z\",\"2020-01-31T00:00:00.000Z\",\"2020-02-28T00:00:00.000Z\",\"2020-03-31T00:00:00.000Z\",\"2020-04-30T00:00:00.000Z\",\"2020-05-29T00:00:00.000Z\",\"2020-06-30T00:00:00.000Z\",\"2020-07-31T00:00:00.000Z\",\"2020-08-31T00:00:00.000Z\",\"2020-09-25T00:00:00.000Z\"],[0.908767017977322,0.898235333189972,0.989740900894519,0.964284245490375,0.884660116485374,0.786218395399551,0.851934208613984,0.837822259579873,0.978076232482116,1.03493014167304,1.04501246643032,1.10254033566597,1.08174536344046,1.10922547788832,1.11894752714777,1.15203057648609,1.13510290115903,1.13937020698963,1.23023137860026,1.16258338158476,1.10850210197715,1.1497967637701,1.05247804335069,1.01123222590816,1.07591495308302,1.04735331771028,1.16234635756184,1.22466886247291,1.08958826745244,1.15178255991649,1.18767873826196,1.25964508709896,1.31957677544363,1.22357314203004,1.28760086073592,1.30118070741259,1.37975872894277,1.40067110285981,1.39790255942251,1.3734789416343,1.46543296808611,1.4867689897646,1.57783122423775,1.46710013964654,1.58062544432516,1.78409213974043,1.91232622795434,1.95560245549105,1.8248027152576,1.85460866218366,1.75225041867719,1.59884936675464,1.64517244982762,1.70338868733678,1.66329579776248,1.75070058957119,1.70515110684204,1.6389404828636,1.72382224782538,1.63290703675638,1.72292637282581,1.84684355241776,1.81123699647763,1.96063232347818,1.99151375002077,2.00764039368857,2.35608253253411,2.25787101126226,2.2326392637999,2.61898481117416,2.76183768341474,2.80160307375964,2.47906848290785,2.32940380309798,2.48793484428492,2.65055992285943,2.86061910168299,2.79496531239225,2.97126415674299,3.01576666007343,3.20401671284148,3.08249353079512,2.99890822904158,3.03367558661574,3.24057657875221,3.34478149111039,3.44979459769554,3.59969966599956,3.80233525359638,3.72991524976942,3.8006629007542,3.78194416332747,3.76117890042605,4.196350545661,4.40951270838883,4.41641776290437,5.22999154909638,5.34954397609844,5.09412515503087,5.38865050491293,5.59074732983126,5.78255758309355,6.09698837608091,6.69138863434097,6.64131617919434,5.33417336834447,5.5878203721066,4.96570145991297,5.56200079131426,5.36203695951625,5.72520884270477,6.15341881924244,5.65073131095295,5.9513918028937,5.98233197843253,5.70239951628557,5.65248481437375,5.81031828390181,5.92776053956913,6.09725439839053,6.51159373961574,6.05046900980237,5.96534917537127,7.25475935041097,7.2311193616478,7.93312090706793,8.90155721010005,9.66138039147515,8.61250713271399]]},\"evals\":[],\"jsHooks\":[]}\nA dollar would have grown quite nicely in this portfolio - about 2.5x - fantastic.\nCalculating the Sharpe Ratio\nNow let’s look at the risk/reward of this portfolio by calculating the Sharpe Ratio. Briefly, the Sharpe Ratio is the mean of the excess monthly returns above the risk-free rate, divided by the standard deviation of the excess monthly returns above the risk-free rate. This is the formulation of the Sharpe Ratio as of 1994; if we wished to use the original formulation from 1966 the denominator would be the standard deviation of portfolio monthly returns. Learn more here.\nIn other words, the Sharpe Ratio measures excess returns per unit of volatility, where we take the standard deviation to represent portfolio volatility. The Sharpe Ratio was brought to us by Bill Sharpe - arguably the most important economist for modern investment management as the creator of the Sharpe Ratio, CAPM and Financial Engines, a forerunner of today’s robo-advisor movement.\nIn the code chunk below, we’ll calculate the Sharpe Ratio in two ways.\nFirst, we’ll use the Return.excess function from PerformanceAnalytics to calculate a time series of monthly excess returns. Two arguments need to be supplied: the time series of returns and the risk-free rate. The function will return a time series of excess returns, and we’ll take the mean of that time series to get the numerator of the Sharpe Ratio. Then we’ll divide by the standard deviation of the that time series to get the Sharpe Ratio.\nOur second method is a bit easier. We’ll use the SharpeRatio function in PerformanceAnalytics, for which we’ll supply two arguments: a time series of monthly returns and risk-free rate.\nFor both methods I use a risk-free rate of .03% as the approximate mean of the 1-month Treasury bill rate since 2010. I’ll cover a quick way to grab this and other data via Quandl in a future post.\n\n\n# Method 1: use the Return.excess function from PerformanceAnalytics,\n# then calculate the Sharpe Ratio manually.\nportfolio_excess_returns <- Return.excess(portfolio_monthly_returns, \n                                          Rf = .0003)\nsharpe_ratio_manual <- round(\n  mean(portfolio_excess_returns) / StdDev(portfolio_excess_returns), 4\n)\n\n# If we wanted to use the original, 1966 formulation of the Sharpe Ratio,\n# there is one small change to the code in Method 1\nsharpe_ratio <- round(\n  SharpeRatio(portfolio_monthly_returns, Rf = .0003), 4\n)\n\n\n\nUsing the Return.excess function and then dividing by the standard deviation of excess returns, the Sharpe Ratio is sharpe_ratio_manual[,1] = 0.2782.\nUsing the built in SharpeRatio function, the Sharpe Ratio is sharpe_ratio[1,] = 0.2782.\nAlright, we have built a portfolio and calculated the Sharpe Ratio - and also set up some nice reusable chunks for data import, portfolio construction and visualization. We haven’t done anything terribly complex but this can serve as a useful paradigm to any collaborators, including our future selves, who want to reproduce this work, learn from this work, or expand upon this work.\n\n\n\n",
    "preview": "posts/2016-11-08-sharpe-ratio/preview.png",
    "last_modified": "2021-03-03T20:54:00-05:00",
    "input_file": {},
    "preview_width": 1644,
    "preview_height": 1014
  }
]
